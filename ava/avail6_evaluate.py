import pandas as pd
import streamlit as st
import plotly.express as px





uploaded_file = st.file_uploader("üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV", type=["xlsx", "csv"])

def evaluate(df,bins,labels):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(df["Availability (%)"], bins=bins, labels=labels, right=True)
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    def evaluate_result(row):
        if row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "90 < Availability (%) <= 100":
            return "‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå"
        elif row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "80 < Availability (%) <= 90":
            return "‚ö†Ô∏è ‡∏ó‡∏£‡∏á‡πÜ"
        else:
            return "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô"
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = df.apply(evaluate_result, axis=1)
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå
    summary_df = df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].value_counts().reset_index()
    summary_df.columns = ["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    summary_df = df.groupby(["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
    # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device" ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏≠‡∏≠‡∏Å
    summary_df = summary_df[summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] > 0]
    # ‡∏•‡∏ö index ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å summary_df
    summary_df = summary_df.reset_index(drop=True)
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Availability (%) ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    df["Availability Range"] = pd.cut(
        df["Availability (%)"], bins=bins, labels=labels, right=True
    )
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Device
    total_devices = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = (summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] / total_devices) * 100
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    #summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].map("{:.2f}%".format)
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].round(2)

    cols = ['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô','‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] + [col for col in df.columns if col != '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' and 
                                                 col != '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô']
    #df = df[[
    #    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device", "description", "Availability (%)",
    #    "Initializing Count", "Initializing Duration (seconds)",
    #    "Telemetry Failure Count", "Telemetry Failure Duration (seconds)",
    #    "Connecting Count", "Connecting Duration (seconds)", "Month", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Availability Range"
    #]]
    # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device
    total_row = pd.DataFrame({
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": ["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [""],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": [summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()],
        "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)": [100.0]  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏∑‡∏≠ 100%
    })

    # ‚ú® ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö summary_df
    summary_df = pd.concat([summary_df, total_row], ignore_index=True)
    summary_df = summary_df[["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", 
                             "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                             "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                             "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"]]
    # ‚úÖ Format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢‡πÜ
    summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].apply(lambda x: f"{x:,}")
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].apply(lambda x: f"{x:.2f}%")
    
    fig1 = px.bar(
        #summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ plot,
        summary_df,
        x="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        color="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        barmode="group",
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    )
    # ‚úÖ Pie Chart ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    fig2 = px.pie(
        summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        names="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        title="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        hole=0.4
    )
    fig2.update_traces(textinfo='percent+label')
    return df, summary_df, fig1, fig2

def range_ava(df,bins,labels):
    filtered_df["Availability Group"] = pd.cut(filtered_df["Availability (%)"], bins=bins_bar, labels=labels_bar, right=True)
    filtered_by_group = filtered_df[filtered_df["Availability Group"].isin(selected_group)]
    grouped_counts = filtered_by_group["Availability Group"].value_counts().sort_index().reset_index()
    grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"}, inplace=True)
    fig3 = px.bar(
                grouped_counts,
                x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
            )
    fig3.update_layout(
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
            showlegend=False,
            )
    st.plotly_chart(fig3, use_container_width=True)

def convert_thai_date(date_str):
    thai_months = {
        '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
        '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
        '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
    }
    for th_month, num_month in thai_months.items():
        if th_month in date_str:
            return date_str.replace(th_month, num_month)
    return date_str

def convert_date(df):
    #df['Availability Period'] = df['Availability Period'].astype(str).apply(convert_thai_date)
    df['Availability Period'] = pd.to_datetime(df['Availability Period'], format='%Y-%m')
    df['Month'] = df['Availability Period'].dt.to_period('M')
    months = sorted(df['Month'].dropna().unique().astype(str))
    return df, months

if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
    else:
        df = pd.read_excel(uploaded_file)
     
    df_filtered, months = convert_date(df)
    st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    
    submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)
    if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
        title = '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU'
    else:
        title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'
    
    func_select = st.sidebar.radio(label="function: ", options = option_func)   
    if func_select == '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•':
        bins_eva = [0, 80, 90, 100]
        labels_eva = ["0 <= Availability (%) <= 80", "80 < Availability (%) <= 90", "90 < Availability (%) <= 100"]
        cols = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + title
        df_evaluate = df_filtered.copy()
        df_eva, summary_df, fig1, fig2 = evaluate(df_evaluate,bins_eva,labels_eva)
        summary_df.rename(columns={"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": cols}, inplace=True)
        st.write(summary_df)
    elif func_select == 'Histogram':
        bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
        labels = [f"{bins[i]}-{bins[i+1]} %" for i in range(len(bins)-1)]  # ["0-10", "10-20", ..., "90-100"]
        df_histogram = df_filtered.copy()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SettingWithCopyWarning
        df_histogram["Availability Group"] = pd.cut(df_histogram["Availability (%)"], bins=bins, labels=labels, right=True)
        grouped_counts = df_histogram["Availability Group"].value_counts().sort_index().reset_index()
        cols = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + title
        grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": cols}, inplace=True)
        fig = px.bar(
                    grouped_counts,
                    x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                    y=cols,
                    color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                    text=cols,
                    title=f"üìä {cols}‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
                )
        fig.update_layout(
                xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
                yaxis_title=cols,
                showlegend=False,
                )
        st.plotly_chart(fig, use_container_width=True)
    elif func_select == '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
        st.write("n/a")
    elif func_select == '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô':
        df_compare = df_filtered.copy()
        #st.write(df_compare.columns.to_list())

        # ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á + ‡∏•‡∏ö NaN
        df_compare = df_compare[df_compare['Month'].notna()]
        df_compare['Month'] = df_compare['Month'].astype(str).str.strip()

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        df_compare['Month'] = pd.to_datetime(df_compare['Month'], format="%Y-%m", errors='coerce')
        df_compare['Month'] = df_compare['Month'].dt.to_period('M').dt.to_timestamp()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        min_month = df_compare['Month'].min()
        max_month = df_compare['Month'].max()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        monthly_summary = df_compare.groupby('Month')['Availability (%)'].mean().reset_index()
        
        #all_months = pd.date_range(start=min_month, end=max_month, freq='MS')  # MS = Month Start
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ 2025
        all_months = pd.date_range(start="2025-01-01", end="2025-12-01", freq='MS')  # Month Start
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        all_months_df = pd.DataFrame({'Month': all_months})
        all_months_df['Month_str'] = all_months_df['Month'].dt.strftime('%b %Y')
        
        # ‡πÅ‡∏õ‡∏•‡∏á monthly_summary ‡πÉ‡∏´‡πâ‡∏°‡∏µ Month (datetime) ‡πÅ‡∏•‡∏∞ Month_str
        monthly_summary['Month'] = pd.to_datetime(monthly_summary['Month'], format="%b %Y")
        monthly_summary['Month_str'] = monthly_summary['Month'].dt.strftime('%b %Y')

        # Merge ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        monthly_summary_full = pd.merge(all_months_df, monthly_summary, on='Month_str', how='left')

        # ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ NaN ‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏Å‡∏£‡∏≤‡∏ü)
        monthly_summary_full['Availability (%)'] = monthly_summary_full['Availability (%)'].fillna(0)

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        monthly_summary_full = monthly_summary_full.sort_values('Month_str')
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.dataframe(monthly_summary_full[['Month_str', 'Availability (%)']], use_container_width=True)

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° Month ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô datetime
        #monthly_summary_full = monthly_summary_full.sort_values('Month')
        
        st.write(monthly_summary_full[['Month', 'Month_str']])
        
         # Line Chart
        st.subheader("üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏™‡πâ‡∏ô)")
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å monthly_summary_full
        fig_line = px.line(
            monthly_summary_full,
            x="Month_str",
            y="Availability (%)",
            text="Availability (%)",
            color="Availability (%)",
            title="üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏Ñ‡∏£‡∏ö 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
        )
        fig_line.update_layout(
            xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            yaxis_title="Availability (%)",
            yaxis=dict(range=[0, 100]),
            xaxis_tickmode='array',
            xaxis_tickvals=monthly_summary_full['Month_str'],
            showlegend=False,
        )
        st.plotly_chart(fig_line, use_container_width=True)

        # Bar Chart
        st.subheader("üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÅ‡∏ó‡πà‡∏á)")
        fig_bar = px.bar(
            monthly_summary,
            x="Month_str",
            y="Availability (%)",
            color="Availability (%)",
            text="Availability (%)"
        )
        fig_bar.update_layout(
            xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            yaxis_title="Availability (%)",
            yaxis=dict(range=[0, 100]),  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y 0-100
            showlegend=False
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.warning("üö® ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å function")


    