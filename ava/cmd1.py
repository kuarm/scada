import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

def show_month(df):
    df_pivot = df.copy()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_pivot["Month"] = pd.to_datetime(df_pivot["Availability Period"], format="%Y-%m", errors="coerce")
    df_pivot["Month_num"] = df_pivot["Month"].dt.month

    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                   '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    df_pivot["Month_name"] = df_pivot["Month_num"].apply(lambda x: month_names[int(x) - 1] if pd.notnull(x) else "")

    st.write("‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô NaN):")
    st.write(df_pivot[df_pivot["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].isnull()])

    # Pivot: row = Device, col = month, val = success %
    pivot_df = df_pivot.pivot_table(
        index="Device",
        columns="Month_name",
        values="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        aggfunc="mean"
    )

    st.write("Pivot ‡πÅ‡∏•‡πâ‡∏ß:")
    st.dataframe(pivot_df)

    st.write("‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:")
    st.write(pivot_df[pivot_df.drop(columns="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)").isnull().all(axis=1)])

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
    null_mask = pivot_df.drop(columns="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)").isnull().all(axis=1)
    devices_all_null = pivot_df[null_mask].index.tolist()

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    pivot_df = pivot_df.reindex(columns=month_names)

    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
    pivot_df["Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pivot_df.mean(axis=1, skipna=True)

    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
    null_mask = pivot_df.drop(columns="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)").isnull().all(axis=1)
    devices_all_null = pivot_df[null_mask].index.tolist()
    st.write(devices_all_null)
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (xx.xx%) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN
    def format_percent(val):
        return f"{val:.2f}%" if pd.notnull(val) else ""

    for col in month_names + ["Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]:
        if col in pivot_df.columns:
            pivot_df[col] = pivot_df[col].apply(format_percent)

    # Reset index
    pivot_df = pivot_df.reset_index()

    return pivot_df, devices_all_null

# ---- Upload and Merge ----
uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    
    for uploaded_file in uploaded_files:
        df = pd.read_excel(uploaded_file)

        if "Availability Period" not in df.columns:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
            
        #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace({",": "", "%": "", "": None}, regex=True)
        #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")

        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace({",": "", "%": ""}, regex=True)

        #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].astype(str).str.replace(",", "").str.replace("%", "").str.strip()
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
        
        all_data.append(df)

    df_combined = pd.concat(all_data, ignore_index=True)

    format_dict = {
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "{:,.0f}",       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "{:,.0f}",        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)": "{:.2f}"     # ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    }

    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)

    if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
        title = '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU'
    else:
        title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'
    
    #st.dataframe(df_combined)

    ### ‚úÖ
    st.info(f"‚úÖ ‡∏™‡∏£‡∏∏‡∏õ ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡πÅ‡∏ï‡πà‡∏•‡∏∞ {title} ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    #pivot_df = pivot_df.style.format(format_dict)
    pivot_df, devices_all_null = show_month(df_combined)
    #st.dataframe(pivot_df)
    #st.write(devices_all_null)

        

    device_options = pivot_df_["Device"].unique()
    selected_devices = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á", device_options, default=device_options)

    pivot_df_filtered = pivot_df[pivot_df["Device"].isin(selected_devices)]

    df_plot = pivot_df_filtered.melt(id_vars=["Device"], 
                        value_vars=[col for col in pivot_df.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]],
                        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
                        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")

    # plot line chart
    fig_line = px.line(df_plot, 
                x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
                y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
                color="Device", 
                markers=True,
                title="üìà ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device")

    fig_line.update_layout(xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", yaxis_title="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", yaxis=dict(range=[0, 105]))
    

    fig_bar = px.bar(pivot_df_filtered, 
              x="Device", 
              y="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
              text="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
              title="üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device")

    fig_bar.update_traces(texttemplate="%{text:.2f}", textposition="outside")
    fig_bar.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 105], yaxis_title="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    
    # ‚úÖ Scatter plot: ‡πÅ‡∏™‡∏î‡∏á Avg ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    fig3 = px.scatter(
        pivot_df,
        x="Device",
        y="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        text="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color_continuous_scale="Viridis",
        title="üîµ Scatter: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device"
    )
    fig3.update_traces(textposition="top center")
    fig3.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 105])
    

    # ‡πÅ‡∏õ‡∏•‡∏á wide ‚Üí long ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π scatter ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_scatter = pivot_df.melt(
        id_vars=["Device"], 
        value_vars=[col for col in pivot_df.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]],
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )

    fig3_month = px.scatter(
        df_scatter,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        title="üîµ Scatter: ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏° Device"
    )
    fig3_month.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 105])
    

    # Histogram ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    fig4 = px.histogram(
        pivot_df,
        x="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        nbins=10,
        title="üìä Histogram: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color_discrete_sequence=["#0072B2"]
    )
    fig4.update_layout(xaxis_title="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
    

    # melt ‡∏Å‡πà‡∏≠‡∏ô
    df_hist = df_scatter.copy()

    fig4_month = px.histogram(
        df_hist,
        x="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        nbins=10,
        barmode="overlay",  # ‡∏´‡∏£‡∏∑‡∏≠ "group"
        title="üìä Histogram: ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
    )
    fig4_month.update_layout(xaxis_title="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")
    

    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìà Line Chart", 
    "üìä Bar Chart", 
    "üîµ Scatter (Avg)", 
    "üîµ Scatter (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", 
    "üìä Histogram (Avg)", 
    "üìä Histogram (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
])

    """
    with tab1:
        st.plotly_chart(fig_line, use_container_width=True)

    with tab2:
        st.plotly_chart(fig_bar, use_container_width=True)

    with tab3:
        st.plotly_chart(fig3, use_container_width=True)

    with tab4:
        st.plotly_chart(fig3_month, use_container_width=True)

    with tab5:
        st.plotly_chart(fig4, use_container_width=True)

    with tab6:
        st.plotly_chart(fig4_month, use_container_width=True)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üìà Line Chart")
        st.plotly_chart(fig_line, use_container_width=True, key="line_chart")

    with col2:
        st.subheader("üîµ Scatter (Avg)")
        st.plotly_chart(fig3, use_container_width=True, key="scatter_avg")

    col3, col4 = st.columns(2)

    with col3:
        st.subheader("üìä Histogram (Avg)")
        st.plotly_chart(fig4, use_container_width=True, key="histogram_avg")

    with col4:
        st.subheader("üìä Histogram (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
        st.plotly_chart(fig4_month, use_container_width=True, key="histogram_month")
    
    # Tabs ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü
    tab1, tab2 = st.tabs(["üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏ß‡∏°", "üß™ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"])

    with tab1:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìà Line Chart")
            st.plotly_chart(fig_line, use_container_width=True, key="line_chart_tab1")
        with col2:
            st.subheader("üîµ Scatter (Avg)")
            st.plotly_chart(fig3, use_container_width=True, key="scatter_avg_tab1")

    with tab2:
        col3, col4 = st.columns(2)
        with col3:
            st.subheader("üîµ Scatter ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            st.plotly_chart(fig3_month, use_container_width=True, key="scatter_month_tab2")
        with col4:
            st.subheader("üìä Bar Chart: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device")
            st.plotly_chart(fig_bar, use_container_width=True, key="bar_chart_tab2")
"""

