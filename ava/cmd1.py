import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

def show_month(df):
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
    df["Month_num"] = df["Month"].dt.month
    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    df["Month_name"] = df["Month_num"].apply(lambda x: month_names[x - 1] if pd.notnull(x) else "")

    # Pivot table: row = Device, column = Month_name, values = Availability (%)
    pivot_df = df.pivot_table(
        index="Device",
        columns="Month_name",
        values="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        aggfunc="mean"
    )

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    pivot_df = pivot_df.reindex(columns=month_names)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    pivot_df["Avg Availability (%)"] = pivot_df.mean(axis=1)

    # Reset index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Device ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    pivot_df = pivot_df.reset_index()

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    pivot_df = pivot_df.round(2)

    st.dataframe(pivot_df)
    
    return pivot_df

# ---- Upload and Merge ----
uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    
    for uploaded_file in uploaded_files:
        df = pd.read_excel(uploaded_file)

        if "Availability Period" not in df.columns:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
            continue
        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace({",": "", "%": ""}, regex=True)
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")

        all_data.append(df)

    df_combined = pd.concat(all_data, ignore_index=True)

    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)

    if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
        title = '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU'
    else:
        title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'
    
    st.dataframe(df_combined)
    pivot_df = show_month(df_combined)

    fig_by_device = px.line(
        pivot_df,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="Device",
        markers=True,
        title="üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device"
        )
    fig_by_device.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 105]),
        hovermode="x unified"
        )
    st.plotly_chart(fig_by_device, use_container_width=True)