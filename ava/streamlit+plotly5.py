import streamlit as st
import pandas as pd
import plotly.express as px

# -- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
st.title("üìä Ultra++ v5.0 : Dynamic Device Analyzer")

uploaded_file = st.file_uploader("üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV", type=["xlsx", "csv"])

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def convert_thai_date(date_str):
    thai_months = {
        '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
        '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
        '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
    }
    for th_month, num_month in thai_months.items():
        if th_month in date_str:
            return date_str.replace(th_month, num_month)
    return date_str

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
def convert_date(df):
    df['Availability Period'] = df['Availability Period'].astype(str).apply(convert_thai_date)
    df['Availability Period'] = pd.to_datetime(df['Availability Period'], format='%m %Y')
    df['Month'] = df['Availability Period'].dt.to_period('M')
    months = sorted(df['Month'].dropna().unique().astype(str))
    return df, months

# -- Main
if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
    else:
        df = pd.read_excel(uploaded_file)

    df, months = convert_date(df)
    st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # -- Filter Section
    st.sidebar.header("üéõÔ∏è ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_month = st.sidebar.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months, default=months)
    filtered_df = df[df['Month'].astype(str).isin(selected_month)]

    # --- Device Filtering Section ---
    st.sidebar.markdown("## üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device")
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Device ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    device_list_all = filtered_df['Device'].dropna().unique().tolist()
    device_list_all.sort()

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô session
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° state ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if "selected_devices" not in st.session_state:
        st.session_state.selected_devices = []
    if "search_text" not in st.session_state:
        st.session_state.search_text = ""
    if "reset_filter" not in st.session_state:
        st.session_state.reset_filter = False
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ flag reset_filter ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á state ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
    if st.session_state.reset_filter:
        st.session_state.selected_devices = []
        st.session_state.search_input = ""
        st.session_state.reset_filter = False
        st.rerun()  # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ multiselect ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ rerun ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏°‡∏±‡∏ô
          
        # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Device
    search_text = st.sidebar.text_input("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Device", value=st.session_state.search_text, key="search_input")

    # Filter list ‡∏ï‡∏≤‡∏° search_text
    if search_text:
        filtered_device_list = [d for d in device_list_all if search_text.lower() in d.lower()]
    else:
        filtered_device_list = device_list_all.copy()  
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á Search ‡πÅ‡∏ö‡∏ö DataFrame (Query View)
    with st.sidebar.expander("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Device ‡∏ó‡∏µ‡πà‡∏û‡∏ö", expanded=True):
        st.dataframe(pd.DataFrame(filtered_device_list, columns=["Device"]), height=150)

    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô search)
    if st.sidebar.button("‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö"):
        st.session_state.selected_devices = filtered_device_list.copy()
    # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á
    if st.sidebar.button("‚ùå ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"):
        st.session_state.reset_filter = True
        st.rerun()  
        
    # ‡∏£‡∏ß‡∏° device ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô search) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏∏‡∏î‡∏à‡∏≤‡∏Å multiselect
    merged_options = list(set(filtered_device_list) | set(st.session_state.selected_devices))
    merged_options.sort()

    # Multiselect device
    selected_devices = st.sidebar.multiselect(
        "üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device",
        options=merged_options,
        default=st.session_state.selected_devices,
        key="selected_devices"
    )

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device
    if not selected_devices:
        st.sidebar.warning("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡πÉ‡∏î‡πÄ‡∏•‡∏¢")

    # Apply Filter
    if selected_devices:
        filtered_df = filtered_df[filtered_df["Device"].isin(selected_devices)]
    
    # ‡πÉ‡∏ä‡πâ filtered_df ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å search_text
    display_df = filtered_df.copy()
    if search_text and not selected_devices:
        display_df = df[df['Device'].isin(filtered_device_list)]

    st.info(f"üîé ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(display_df)} records ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á")
    st.dataframe(display_df, use_container_width=True)
    #st.info(f"üîé ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(filtered_df)} records ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á")
    #st.dataframe(filtered_df, use_container_width=True)
    
    # -- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà Plot ‡πÑ‡∏î‡πâ
    exclude_cols = ["Description", "Source File", "Availability Period", "Month"]
    available_columns = [col for col in filtered_df.columns if col not in exclude_cols]

    # --- Custom Plot Section ---
    st.header("üé® Customize Your Plot (Ultra++ v5.0)")

    col1, col2 = st.columns(2)
    with col1:
        selected_x = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô X", options=available_columns)
    with col2:
        selected_y = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô Y", options=available_columns)

    col3, col4 = st.columns(2)
    with col3:
        graph_theme = st.selectbox("üé® ‡∏ò‡∏µ‡∏°‡∏™‡∏µ", ["Blue", "Coral", "Green", "Purple"])
    with col4:
        chart_size = st.select_slider("üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü", options=["‡πÄ‡∏•‡πá‡∏Å", "‡∏Å‡∏•‡∏≤‡∏á", "‡πÉ‡∏´‡∏ç‡πà"], value="‡∏Å‡∏•‡∏≤‡∏á")

    add_trendline = st.checkbox("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÑ‡∏•‡∏ô‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Scatter)")
    show_marker = st.checkbox("‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î Marker (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Scatter)", value=True)

    # ‡∏™‡∏µ‡∏ò‡∏µ‡∏°
    theme_color = {
        "Blue": "#00BFFF",
        "Coral": "#FF7F50",
        "Green": "#32CD32",
        "Purple": "#800080"
    }[graph_theme]

    # ‡∏Ç‡∏ô‡∏≤‡∏î layout
    size_map = {
        "‡πÄ‡∏•‡πá‡∏Å": 500,
        "‡∏Å‡∏•‡∏≤‡∏á": 700,
        "‡πÉ‡∏´‡∏ç‡πà": 1000
    }

    # --- Graph Plot
    if selected_x and selected_y:
        if selected_x == selected_y:
            st.warning("üö´ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å X ‡πÅ‡∏•‡∏∞ Y ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô")
        else:
            fig = px.scatter(
                filtered_df,
                x=selected_x,
                y=selected_y,
                color_discrete_sequence=[theme_color],
                trendline="ols" if add_trendline else None
            ) if show_marker else px.scatter(
                filtered_df,
                x=selected_x,
                y=selected_y,
                color_discrete_sequence=[theme_color],
                trendline="ols" if add_trendline else None,
                markers=False
            )

            fig.update_layout(
                width=size_map[chart_size],
                height=int(size_map[chart_size] * 0.6),
                title=f"{selected_x} vs {selected_y}",
                margin=dict(l=40, r=40, t=40, b=40)
            )

            st.plotly_chart(fig, use_container_width=True)

    # --- Download Button
    csv_filtered = display_df.to_csv(index=False, encoding="utf-8-sig")
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
        data=csv_filtered,
        file_name="filtered_data_v5.csv",
        mime="text/csv"
    )

else:
    st.warning("üö® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°")
