import pandas as pd
import streamlit as st

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
file_path = "ava_test.xlsx"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏∏‡∏ì
df = pd.read_excel(file_path, sheet_name="Sheet5",header=0)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Field change time" ‡πÄ‡∏õ‡πá‡∏ô datetime
df["Field change time"] = pd.to_datetime(df["Field change time"], errors="coerce")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Message ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
st.write("üîç Unique Messages in Dataset:")
st.write(df["Message"].unique())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Message ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "Initializing"
st.write("\n‚úÖ Messages ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö 'Initializing':")
st.write(df[df["Message"].str.contains("Initializing", na=False, case=False)]["Message"].unique())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Message ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "Connecting"
st.write("\n‚úÖ Messages ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö 'Connecting':")
st.write(df[df["Message"].str.contains("Connecting", na=False, case=False)]["Message"].unique())

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
df_start = df[df["Message"].str.contains("Connecting", na=False, case=False) & df["Message"].str.contains("Initializing", na=False, case=False)].copy()
df_end = df[df["Message"].str.contains("Initializing", na=False, case=False) & df["Message"].str.contains("Online", na=False, case=False)].copy()

# ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö
st.write("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:", len(df_start))
st.write("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:", len(df_end))

if df_start.empty or df_end.empty:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel")
else:
    # ‡∏£‡∏µ‡πÄ‡∏ô‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    df_start = df_start.rename(columns={"Field change time": "Start Time"})
    df_end = df_end.rename(columns={"Field change time": "End Time"})

    df_start = df_start.sort_values("Start Time")
    df_end = df_end.sort_values("End Time")

    df_merged = pd.merge_asof(df_start, df_end, left_on="Start Time", right_on="End Time", direction="forward")

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    df_merged["Duration (seconds)"] = (df_merged["End Time"] - df_merged["Start Time"]).dt.total_seconds()

    st.write("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
    st.write(df_merged)

st.write("------------------------")
# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
df = df.sort_values("Field change time").reset_index(drop=True)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Message ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
st.write("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Message ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:")
st.write(df["Message"].unique())

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Message ‡∏ó‡∏µ‡πà‡∏°‡∏µ "Initializing" (Partial Match)
st.write("‚úÖ Messages ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö 'Initializing':")
st.write(df[df["Message"].str.contains("Initializing", na=False, case=False)]["Message"].unique())

# ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Initializing
state_start = "Remote unit state changed from Connecting to Initializing."
state_end = "Remote unit state changed from Initializing to Online."

# Partial Match ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
df_start = df[df["Message"].str.contains("Connecting to Initializing", na=False, case=False)].copy()
df_end = df[df["Message"].str.contains("Initializing to Online", na=False, case=False)].copy()

df_start = df[df["Message"] == state_start].rename(columns={"Field change time": "Start Time"})
df_end = df[df["Message"] == state_end].rename(columns={"Field change time": "End Time"})

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á
st.write("‚úÖ Message Start ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(df_start))
st.write("‚úÖ Message End ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(df_end))

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô df_start ‡πÅ‡∏•‡∏∞ df_end
if df_start.empty or df_end.empty:
    st.write("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel")
else:
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
    df_merged = pd.merge(df_start, df_end, how="outer")

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (Duration) ‡∏Ç‡∏≠‡∏á State "Initializing"
df_merged["Duration (seconds)"] = (df_merged["End Time"] - df_merged["Start Time"]).dt.total_seconds()

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
st.write("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
st.write(df_merged)
