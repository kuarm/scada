import pandas as pd
import streamlit as st
from fuzzywuzzy import process

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
file_path = "ava_test.xlsx"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏∏‡∏ì
df = pd.read_excel(file_path, sheet_name="Sheet4",header=0)
st.write(df)

event = ["Remote unit state changed from Online to Telemetry Failure.",
         "Remote unit state changed from Online to Connecting.",
         "Remote unit state changed from Online to Initializing.",
         "Remote unit state changed from Online to Offline.",
         "Remote unit state changed from Telemetry Failure to Online.",
         "Remote unit state changed from Telemetry Failure to Connecting.",
         "Remote unit state changed from Telemetry Failure to Offline.",
         "Remote unit state changed from Telemetry Failure to Initializing.",
         "Remote unit state changed from Connecting to Initializing.",
         "Remote unit state changed from Connecting to Offline.",
         "Remote unit state changed from Initializing to Connecting.",
         "Remote unit state changed from Initializing to Online.",
         "Remote unit state changed from Initializing to Offline.",
         "Remote unit state changed from Offline to Connecting."]

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
#df["Message"] = df["Message"].astype(str).str.strip()
#df["Best Match"] = df["Message"].apply(lambda x: process.extractOne(x, event)[0])

# ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
#st.write(df[["Message", "Best Match"]].head(20))

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Message
#st.write("üîç Checking unique messages in dataset:")
#unique_messages = df["Message"].dropna().unique()
#for msg in unique_messages:
#    st.write(f"üëâ '{msg}'")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def get_best_match(message, choices, threshold=80):
    match = process.extractOne(message, choices)
    return match[0] if match and match[1] >= threshold else None

df["Best Match"] = df["Message"].apply(lambda x: get_best_match(x, event))

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
df_filtered = df[df["Best Match"].notna()].copy()
st.write("-------------")

# ‡∏î‡∏π Message ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á)
#st.write("Unique Messages in Dataset:")
#st.write(df["Message"].dropna().unique())

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÉ‡∏ô Message
#df = df.dropna(subset=["Message"])

# ‡πÅ‡∏õ‡∏•‡∏á Message ‡πÄ‡∏õ‡πá‡∏ô String ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
#df["Message"] = df["Message"].astype(str).str.strip()

# filter Excel
#df = df.reset_index(drop=True)
#df = df.drop(columns=["#"])

# ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Message ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
#df_filtered = df[df["Message"].isin(event)].copy()

# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
if df_filtered.empty:
    st.write("‚ùå No matching messages found! Check spelling and spaces in 'event'.")

    for message in event:
        matched_rows = df_filtered[df_filtered["Message"].str.contains(message[:30], na=False, regex=False)]  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if not matched_rows.empty:
            st.write(f"‚úÖ Found partial match for: {message[:30]}...")

# ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á
#st.write(df_filtered.head())

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Field change time ‡πÄ‡∏õ‡πá‡∏ô datetime
df_filtered["Field change time"] = pd.to_datetime(df_filtered["Field change time"], errors="coerce")

# ‡πÉ‡∏ä‡πâ regex ‡πÅ‡∏¢‡∏Å State ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
df_filtered[["Previous State", "Next State"]] = df_filtered["Message"].str.extract(r'from (.+) to (.+)')

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Previous State ‡πÅ‡∏•‡∏∞ Next State
df_filtered = df_filtered.dropna(subset=["Previous State", "Next State"])

# ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° Previous State ‡πÅ‡∏•‡∏∞ Next State
df_filtered = df_filtered.sort_values("Field change time")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
#df_filtered = df_filtered.sort_values("Field change time").reset_index(drop=True)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Duration
df_filtered["Duration (second)"] = df_filtered.groupby(["Previous State", "Next State"])["Field change time"].diff().dt.total_seconds()

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å diff()
df_filtered = df_filtered.dropna(subset=["Duration (second)"])

result_col = ["Field change time","Previous State","Next State","Duration (second)"]

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Duration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà Previous State -> Next State
df_duration_summary = df_filtered.groupby(["Previous State", "Next State"])["Duration (second)"].sum().reset_index()

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏ó‡∏µ, ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
df_duration_summary["Duration (minutes)"] = df_duration_summary["Duration (second)"] / 60
df_duration_summary["Duration (hours)"] = df_duration_summary["Duration (second)"] / 3600

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
st.write("üîπ Summary of Total Duration for Each State Transition:")
st.write(df_duration_summary)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
st.write(df_filtered[(result_col)])

df_duration_summary = df_duration_summary.sort_values("Duration (minutes)", ascending=False)
st.bar_chart(df_duration_summary, x="Previous State", y="Duration (minutes)")
