import pandas as pd
import streamlit as st
import plotly.express as px

source_csv_feeder = "D:/ML/scada/ava/source_csv/availability_data.csv"
source_csv_sub = ""

# ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ -> ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
thai_months = {
    '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
    '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
    '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
}

@st.cache_data
def load_data_csv(file_path):
    df = pd.read_csv(file_path)
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏Å‡∏•
    df['Availability Period'] = df['Availability Period'].astype(str).apply(convert_thai_date)
    df['Availability Period'] = pd.to_datetime(df['Availability Period'], format='%m %Y')
    df['Month'] = df['Availability Period'].dt.to_period('M')
    
    return df

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Availability Period ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà pandas ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
def convert_thai_date(date_str):
    for th_month, num_month in thai_months.items():
        if th_month in date_str:
            return date_str.replace(th_month, num_month)
    return date_str

def evaluate(df,bins,labels):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(df["Availability (%)"], bins=bins, labels=labels, right=True)
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    def evaluate_result(row):
        if row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "90 < Availability (%) <= 100":
            return "‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå"
        elif row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "80 < Availability (%) <= 90":
            return "‚ö†Ô∏è ‡∏ó‡∏£‡∏á‡πÜ"
        else:
            return "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô"
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = df.apply(evaluate_result, axis=1)
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå
    summary_df = df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].value_counts().reset_index()
    summary_df.columns = ["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    summary_df = df.groupby(["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
    # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device" ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏≠‡∏≠‡∏Å
    summary_df = summary_df[summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] > 0]
    # ‡∏•‡∏ö index ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å summary_df
    summary_df = summary_df.reset_index(drop=True)
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Availability (%) ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    df["Availability Range"] = pd.cut(
        df["Availability (%)"], bins=bins, labels=labels, right=True
    )
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Device
    total_devices = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = (summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] / total_devices) * 100
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    #summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].map("{:.2f}%".format)
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].round(2)

    cols = ['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô','‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] + [col for col in df.columns if col != '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' and 
                                                 col != '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô']
    #df = df[[
    #    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device", "description", "Availability (%)",
    #    "Initializing Count", "Initializing Duration (seconds)",
    #    "Telemetry Failure Count", "Telemetry Failure Duration (seconds)",
    #    "Connecting Count", "Connecting Duration (seconds)", "Month", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Availability Range"
    #]]
    # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device
    total_row = pd.DataFrame({
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": ["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [""],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": [summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()],
        "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)": [100.0]  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏∑‡∏≠ 100%
    })

    # ‚ú® ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö summary_df
    summary_df = pd.concat([summary_df, total_row], ignore_index=True)
    # ‚úÖ Format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢‡πÜ
    summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].apply(lambda x: f"{x:,}")
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].apply(lambda x: f"{x:.2f}%")
    fig1 = px.bar(
        summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ plot,
        x="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        color="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        barmode="group",
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    )
    # ‚úÖ Pie Chart ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    fig2 = px.pie(
        summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        names="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        title="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        hole=0.4
    )
    fig2.update_traces(textinfo='percent+label')
    return df, summary_df, fig1, fig2

option_menu = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå','% ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', '% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£']
option_func = ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• % Availability', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° % Availability', '‡∏î‡∏π % Availability vs ']
option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']

def main():
    menu_select = st.sidebar.radio(label="Menu: ", options = option_menu)
    
    if menu_select == '% ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô':
        #st.header("üìä %‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
        
        submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)
        
        if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
            df = load_data_csv(source_csv_feeder)
            # --- üéØ Filter ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ---
            months = sorted(df['Month'].dropna().unique().astype(str))
            selected_month = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months)
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            filtered_df = df[df['Month'].astype(str) == selected_month]
            filtered_df = filtered_df.drop(columns=['Availability Period','Source File'],axis=0)
            
            func_select = st.sidebar.radio(label="function: ", options = option_func)
            
            if func_select == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• % Availability':
                st.info(f"üìä % ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Frtu ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(filtered_df['Device'])} ‡∏ä‡∏∏‡∏î ")
                col1, col2, col3, col4 = st.columns(4)
                st.markdown("---------")
                bins_bar = [0, 20, 40, 60, 80, 90, 95, 100]
                labels_bar = ["0-20%", "21-40%", "41-60%", "61-80%", "81-90%", "91-95%", "96-100%"]
                
                with col1:
                    st.metric(label="üìà Avg. Availability (%)", value=f"{filtered_df['Availability (%)'].mean():.2f} %")
                with col2:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing'].mean():.2f}")
                with col3:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Connecting", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Connecting'].mean():.2f}")
                with col4:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Telemetry Failure", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Telemetry Failure'].mean():.2f}")
                #selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar, default=labels_bar)
                select_all = st.checkbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=True)

                if select_all:
                    selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar, default=labels_bar)
                else:
                    selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
                if not selected_group:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á % Availability")
                    st.stop()
                filtered_df["Availability Group"] = pd.cut(filtered_df["Availability (%)"], bins=bins_bar, labels=labels_bar, right=True)
                filtered_by_group = filtered_df[filtered_df["Availability Group"].isin(selected_group)]
                grouped_counts = filtered_by_group["Availability Group"].value_counts().sort_index().reset_index()
                grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"}, inplace=True)
                fig3 = px.bar(
                            grouped_counts,
                            x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                            color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                            title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
                        )
                fig3.update_layout(
                        xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
                        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                        showlegend=False,
                        )
                st.plotly_chart(fig3, use_container_width=True)
                st.markdown("---------")
            
                bins_eva = [0, 80, 90, 100]
                labels_eva = ["0 <= Availability (%) <= 80", "80 < Availability (%) <= 90", "90 < Availability (%) <= 100"]
                df_eva, summary_df, fig1, fig2 = evaluate(filtered_df,bins_eva,labels_eva)
                st.plotly_chart(fig1, use_container_width=True)
                st.dataframe(summary_df)
                #st.write(df_eva.columns.to_list())
                #st.dataframe(df_eva)
                filter_detail_select = st.checkbox("Filter Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ì: ")         
                if filter_detail_select:
                    select_all = st.checkbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=True)
                    rangeava_options = df_eva["Availability Range"].unique()
                    if select_all:
                        rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=rangeava_options, default=rangeava_options)
                        df_ava = df_eva.copy()
                    else:
                        rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=rangeava_options)
                        df_ava = df_eva[df_eva["Availability Range"].isin(rangeava_select)]
                        
                    #rangeava_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df_eva["Availability Range"].unique())
                    #rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á Availability", rangeava_options, default=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
                    #if not rangeava_select or "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in rangeava_select:
                        #df_ava = df_eva.copy()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    #else:
                        #df_ava = df_eva[df_eva["Availability Range"].isin(rangeava_select)]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    #device_list = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df_ava["Device"].unique())
                    #selected_devices = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", device_list, default=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])  
                    #if not selected_devices or "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in selected_devices:
                    #    df_ava = df_ava.copy()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    #else:
                    #    df_ava = df_ava[df_ava["Device"].isin(selected_devices)]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    st.dataframe(df_ava)
                    
                    filter_describe_select = st.checkbox("‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ : ")
                    if filter_describe_select:  
                        st.write(df_ava.describe())
                st.markdown("---------")
            elif func_select == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° % Availability':
                min_avail, max_avail = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á Availability (%)", 0, 100, (70, 90), step=1)
                filtered_df = filtered_df[(filtered_df["Availability (%)"] >= min_avail) & (filtered_df["Availability (%)"] <= max_avail)]
                
                # üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Filter ‡πÅ‡∏ö‡∏ö multiselect ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                device_options = filtered_df["Device"].unique().tolist()
                selected_devices = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Device):", options=device_options, default=device_options)

                description_options = filtered_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing"].unique().tolist()
                selected_descriptions = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Description:", options=description_options, default=description_options)

                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing
                if "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing" in filtered_df.columns:
                    min_init, max_init = int(filtered_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing"].min()), int(filtered_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing"].max())
                    selected_init_range = st.slider(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing:",
                        min_value=min_init,
                        max_value=max_init,
                        value=(min_init, max_init),
                        step=1
                    )
                    filtered_df = filtered_df[
                        (filtered_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing"] >= selected_init_range[0]) &
                        (filtered_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing"] <= selected_init_range[1])
                    ]
        
                # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                filtered_df = filtered_df[
                    (filtered_df["Device"].isin(selected_devices)) & 
                    (filtered_df["Description"].isin(selected_descriptions))
                ]
                
                st.info(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Frtu : {len(filtered_df['Device'])} ‡∏ä‡∏∏‡∏î")
                st.write(filtered_df)
                #filtered_by_group = filtered_df[filtered_df["Availability Group"].isin(selected_group)]
                #devices_counts = filtered_df["Device"].sum()

                #st.dataframe(filtered_df[['Device', 'Availability (%)']].sort_values(by='Availability (%)', ascending=False))
                #st.dataframe(filtered_df.sort_values(by='Availability (%)', ascending=False))
                
                # --- üìà ‡∏Å‡∏£‡∏≤‡∏ü ---
                fig_bar = px.bar(
                    filtered_df,
                    x='Device',
                    y='Availability (%)',
                    color='Availability (%)',
                    title=f"Availability (%) ‡∏ï‡πà‡∏≠ Device - {selected_month}",
                    color_continuous_scale='Greens'
                )
                #st.plotly_chart(fig_bar, use_container_width=True)

                # ‡πÅ‡∏õ‡∏•‡∏á Period ‡πÄ‡∏õ‡πá‡∏ô string
                #df['Month'] = df['Month'].astype(str)
                fig_scatter = px.scatter(
                    filtered_df,
                    x='Device',  # ‡πÅ‡∏Å‡∏ô X = ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    y='Availability (%)',  # ‡πÅ‡∏Å‡∏ô Y = Availability
                    color='Device',  # ‡πÅ‡∏¢‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏° Device
                    hover_data=['Device', 'Availability (%)'],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
                    title='Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device'
                )
                fig_scatter.update_traces(mode='markers+lines')  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
                fig_scatter.update_layout(xaxis_title='Device', yaxis_title='Availability (%)')
                st.plotly_chart(fig_scatter, use_container_width=True)
                st.markdown("---------")
        else:
            df = load_data_csv(source_csv_sub)
            
if __name__ == "__main__":
    main()


