import pandas as pd
import streamlit as st
import plotly.express as px
from io import StringIO
from datetime import datetime

st.set_page_config(page_title="Ultra Device Dashboard", layout="wide", page_icon="‚ö°")

source_csv_feeder = "D:/ML/scada/ava/source_csv/availability_data.csv"
source_csv_sub = ""

# ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ -> ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
thai_months = {
    '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
    '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
    '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
}

@st.cache_data
def load_data_csv(file_path):
    df = pd.read_csv(file_path)
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≤‡∏Å‡∏•
    df['Availability Period'] = df['Availability Period'].astype(str).apply(convert_thai_date)
    df['Availability Period'] = pd.to_datetime(df['Availability Period'], format='%m %Y')
    df['Month'] = df['Availability Period'].dt.to_period('M')
    
    return df

# ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Availability Period ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà pandas ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
def convert_thai_date(date_str):
    for th_month, num_month in thai_months.items():
        if th_month in date_str:
            return date_str.replace(th_month, num_month)
    return date_str

def evaluate(df,bins,labels):
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(df["Availability (%)"], bins=bins, labels=labels, right=True)
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    def evaluate_result(row):
        if row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "90 < Availability (%) <= 100":
            return "‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏Æ‡∏á‡∏Ñ‡πå"
        elif row["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] == "80 < Availability (%) <= 90":
            return "‚ö†Ô∏è ‡∏ó‡∏£‡∏á‡πÜ"
        else:
            return "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô"
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = df.apply(evaluate_result, axis=1)
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå
    summary_df = df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].value_counts().reset_index()
    summary_df.columns = ["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
    summary_df = df.groupby(["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
    # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device" ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏≠‡∏≠‡∏Å
    summary_df = summary_df[summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] > 0]
    # ‡∏•‡∏ö index ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å summary_df
    summary_df = summary_df.reset_index(drop=True)
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Availability (%) ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    df["Availability Range"] = pd.cut(
        df["Availability (%)"], bins=bins, labels=labels, right=True
    )
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Device
    total_devices = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = (summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] / total_devices) * 100
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    #summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].map("{:.2f}%".format)
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].round(2)

    cols = ['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô','‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] + [col for col in df.columns if col != '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' and 
                                                 col != '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô']
    #df = df[[
    #    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device", "description", "Availability (%)",
    #    "Initializing Count", "Initializing Duration (seconds)",
    #    "Telemetry Failure Count", "Telemetry Failure Duration (seconds)",
    #    "Connecting Count", "Connecting Duration (seconds)", "Month", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Availability Range"
    #]]
    # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device
    total_row = pd.DataFrame({
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": ["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [""],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": [summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()],
        "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)": [100.0]  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏∑‡∏≠ 100%
    })

    # ‚ú® ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö summary_df
    summary_df = pd.concat([summary_df, total_row], ignore_index=True)
    # ‚úÖ Format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢‡πÜ
    summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].apply(lambda x: f"{x:,}")
    summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].apply(lambda x: f"{x:.2f}%")
    fig1 = px.bar(
        summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ plot,
        x="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        color="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        barmode="group",
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    )
    # ‚úÖ Pie Chart ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    fig2 = px.pie(
        summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        names="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
        title="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        hole=0.4
    )
    fig2.update_traces(textinfo='percent+label')
    return df, summary_df, fig1, fig2

option_menu = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå','% ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', '% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£']
option_func = ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• % Availability', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° % Availability', '‡∏î‡∏π % Availability vs ']
option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']

def main():
    menu_select = st.sidebar.radio(label="Menu: ", options = option_menu)
    
    if menu_select == '% ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô':
        #st.header("üìä %‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
        
        submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)
        
        if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
            df = load_data_csv(source_csv_feeder)
            # --- üéØ Filter ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ---
            months = sorted(df['Month'].dropna().unique().astype(str))
            selected_month = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", months)
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            filtered_df = df[df['Month'].astype(str) == selected_month]
            filtered_df = filtered_df.drop(columns=['Availability Period','Source File'],axis=0)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏£‡∏≠‡∏á
            df_selection = filtered_df.copy()
            func_select = st.sidebar.radio(label="function: ", options = option_func)
            
            if func_select == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• & ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• % Availability':
                st.info(f"üìä % ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå Frtu ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(filtered_df['Device'])} ‡∏ä‡∏∏‡∏î ")
                col1, col2, col3, col4 = st.columns(4)
                st.markdown("---------")
                bins_bar = [0, 20, 40, 60, 80, 90, 95, 100]
                labels_bar = ["0-20%", "21-40%", "41-60%", "61-80%", "81-90%", "91-95%", "96-100%"]
                
                with col1:
                    st.metric(label="üìà Avg. Availability (%)", value=f"{filtered_df['Availability (%)'].mean():.2f} %")
                with col2:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Initializing'].mean():.2f}")
                with col3:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Connecting", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Connecting'].mean():.2f}")
                with col4:
                    st.metric(label="üî¢ Avg. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Telemetry Failure", value=f"{filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á Telemetry Failure'].mean():.2f}")
                #selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar, default=labels_bar)
                select_all = st.checkbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=True)

                if select_all:
                    selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar, default=labels_bar)
                else:
                    selected_group = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=labels_bar)
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
                if not selected_group:
                    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á % Availability")
                    st.stop()
                filtered_df["Availability Group"] = pd.cut(filtered_df["Availability (%)"], bins=bins_bar, labels=labels_bar, right=True)
                filtered_by_group = filtered_df[filtered_df["Availability Group"].isin(selected_group)]
                grouped_counts = filtered_by_group["Availability Group"].value_counts().sort_index().reset_index()
                grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"}, inplace=True)
                fig3 = px.bar(
                            grouped_counts,
                            x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                            color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                            title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
                        )
                fig3.update_layout(
                        xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
                        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                        showlegend=False,
                        )
                st.plotly_chart(fig3, use_container_width=True)
                st.markdown("---------")
            
                bins_eva = [0, 80, 90, 100]
                labels_eva = ["0 <= Availability (%) <= 80", "80 < Availability (%) <= 90", "90 < Availability (%) <= 100"]
                df_eva, summary_df, fig1, fig2 = evaluate(filtered_df,bins_eva,labels_eva)
                st.plotly_chart(fig1, use_container_width=True)
                st.dataframe(summary_df)
                #st.write(df_eva.columns.to_list())
                #st.dataframe(df_eva)
                filter_detail_select = st.checkbox("Filter Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ì: ")         
                if filter_detail_select:
                    select_all = st.checkbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=True)
                    rangeava_options = df_eva["Availability Range"].unique()
                    if select_all:
                        rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=rangeava_options, default=rangeava_options)
                        df_ava = df_eva.copy()
                    else:
                        rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á % Availability:", options=rangeava_options)
                        df_ava = df_eva[df_eva["Availability Range"].isin(rangeava_select)]
                        
                    #rangeava_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df_eva["Availability Range"].unique())
                    #rangeava_select = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á Availability", rangeava_options, default=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
                    #if not rangeava_select or "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in rangeava_select:
                        #df_ava = df_eva.copy()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    #else:
                        #df_ava = df_eva[df_eva["Availability Range"].isin(rangeava_select)]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    #device_list = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(df_ava["Device"].unique())
                    #selected_devices = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", device_list, default=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])  
                    #if not selected_devices or "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in selected_devices:
                    #    df_ava = df_ava.copy()  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    #else:
                    #    df_ava = df_ava[df_ava["Device"].isin(selected_devices)]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    st.dataframe(df_ava)
                    
                    filter_describe_select = st.checkbox("‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ : ")
                    if filter_describe_select:  
                        st.write(df_ava.describe())
                st.markdown("---------")
            elif func_select == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏° % Availability':
                #min_avail, max_avail = st.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á Availability (%)", 0, 100, (0, 100), step=1)
                #filtered_df = filtered_df[(filtered_df["Availability (%)"] >= min_avail) & (filtered_df["Availability (%)"] <= max_avail)]
                
                

                st.title("üìà Ultra Dashboard - Dynamic Filtering + Export + Save Preset")

                # -----------------------------------
                # üî• ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° SessionState
                # -----------------------------------
                if "saved_presets" not in st.session_state:
                    st.session_state.saved_presets = {}

                # ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
                df_selection = filtered_df.copy()

                # --------------------------
                # üî• ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå Dynamic
                # --------------------------
                st.sidebar.header("üéõÔ∏è ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Filters)")

                filters = {}

                use_inputbox = st.sidebar.checkbox("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ó‡∏ô Slider", value=False)

                for col in df_selection.columns:
                    if pd.api.types.is_numeric_dtype(df_selection[col]):
                        min_val = int(df_selection[col].min())
                        max_val = int(df_selection[col].max())
                        if use_inputbox:
                            min_input = st.sidebar.number_input(f"‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î {col}:", value=min_val, key=f"{col}_min")
                            max_input = st.sidebar.number_input(f"‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {col}:", value=max_val, key=f"{col}_max")
                            filters[col] = (min_input, max_input)
                        else:
                            selected_range = st.sidebar.slider(
                                f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á {col}:", 
                                min_value=min_val, 
                                max_value=max_val,
                                value=(min_val, max_val),
                                step=1,
                                key=col
                            )
                            filters[col] = selected_range
                    elif pd.api.types.is_object_dtype(df_selection[col]) or pd.api.types.is_categorical_dtype(df_selection[col]):
                        options = df_selection[col].dropna().unique().tolist()
                        selected_options = st.sidebar.multiselect(
                            f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {col}:", 
                            options=options, 
                            default=options,
                            key=col
                        )
                        filters[col] = selected_options

                # --------------------------
                # üî• Apply Filter
                # --------------------------
                for col, condition in filters.items():
                    if isinstance(condition, tuple):
                        df_selection = df_selection[
                            (df_selection[col] >= condition[0]) & (df_selection[col] <= condition[1])
                        ]
                    else:
                        df_selection = df_selection[df_selection[col].isin(condition)]

                st.success(f"üéØ ‡∏û‡∏ö {len(df_selection)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

                # --------------------------
                # üíæ Save Filter Preset
                # --------------------------
                preset_name = st.sidebar.text_input("‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ Preset", "")
                if st.sidebar.button("üíæ Save Preset"):
                    if preset_name:
                        st.session_state.saved_presets[preset_name] = filters.copy()
                        st.sidebar.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Preset '{preset_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    else:
                        st.sidebar.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Preset")

                # --------------------------
                # üìÇ Load Filter Preset
                # --------------------------
                if st.session_state.saved_presets:
                    selected_preset = st.sidebar.selectbox("üìÇ ‡πÇ‡∏´‡∏•‡∏î Preset ‡∏ó‡∏µ‡πà‡∏°‡∏µ", options=["-"] + list(st.session_state.saved_presets.keys()))
                    if selected_preset != "-" and st.sidebar.button("üîÑ Load Preset"):
                        loaded_filters = st.session_state.saved_presets[selected_preset]
                        st.experimental_rerun()

                # --------------------------
                # üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                # --------------------------
                with st.expander("üßπ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô"):
                    selected_cols = st.multiselect(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á:", 
                        options=list(df_selection.columns), 
                        default=list(df_selection.columns)
                    )
                    df_selection = df_selection[selected_cols]

                st.dataframe(df_selection, use_container_width=True)

                # --------------------------
                # üìà ‡∏Å‡∏£‡∏≤‡∏ü
                # --------------------------
                if not df_selection.empty:
                    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü")

                    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Theme
                    themes = {
                        "Basic": px.colors.qualitative.Plotly,
                        "Pastel": px.colors.qualitative.Pastel,
                        "Bold": px.colors.qualitative.Bold,
                        "Dark": px.colors.qualitative.Dark2,
                    }
                    selected_theme = st.selectbox("üé® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Theme ‡∏Å‡∏£‡∏≤‡∏ü:", list(themes.keys()))

                    y_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà Plot (Y-axis):", df_selection.select_dtypes(include=['number']).columns)
                    fig = px.bar(
                        df_selection,
                        x="Device",
                        y=y_col,
                        text=y_col,
                        color_discrete_sequence=themes[selected_theme]
                    )
                    st.plotly_chart(fig, use_container_width=True)

                    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü
                    img_bytes = fig.to_image(format="png")
                    st.download_button(
                        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü (PNG)",
                        data=img_bytes,
                        file_name=f"chart_{datetime.now().strftime('%Y%m%d-%H%M%S')}.png",
                        mime="image/png"
                    )

                else:
                    st.warning("‚ùó ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà")

                # --------------------------
                # üì• Download Data as Excel (.xlsx)
                # --------------------------
                def to_excel(df):
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                        df.to_excel(writer, index=False, sheet_name="Filtered Data")
                        workbook = writer.book
                        worksheet = writer.sheets["Filtered Data"]
                        for idx, col in enumerate(df.columns):
                            column_len = max(df[col].astype(str).map(len).max(), len(col))
                            worksheet.set_column(idx, idx, column_len + 2)
                    processed_data = output.getvalue()
                    return processed_data

                excel_data = to_excel(df_selection)

                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Excel (.xlsx)",
                    data=excel_data,
                    file_name=f"filtered_devices_{datetime.now().strftime('%Y%m%d-%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

                # -----------------------------------
                # üìàüìâ Section: Plot ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                # -----------------------------------
                st.subheader("üîó ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")

                num_cols = df_selection.select_dtypes(include=['number']).columns.tolist()

                if len(num_cols) >= 2:
                    col1, col2 = st.columns(2)
                    with col1:
                        selected_x = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô X-axis:", options=num_cols, key="x_axis_relation")
                    with col2:
                        selected_y = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Å‡∏ô Y-axis:", options=num_cols, key="y_axis_relation")

                    plot_type = st.radio(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü:", 
                        options=["Scatter Plot", "Line Plot", "Bar Plot"], 
                        horizontal=True,
                        key="relation_plot_type"
                    )

                    if selected_x and selected_y:
                        if plot_type == "Scatter Plot":
                            fig_relation = px.scatter(
                                df_selection,
                                x=selected_x,
                                y=selected_y,
                                color_discrete_sequence=["#636EFA"],
                                trendline="ols", # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢!
                                title=f"Scatter Plot ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {selected_x} ‡πÅ‡∏•‡∏∞ {selected_y}"
                            )
                        elif plot_type == "Line Plot":
                            fig_relation = px.line(
                                df_selection,
                                x=selected_x,
                                y=selected_y,
                                markers=True,
                                title=f"Line Plot ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {selected_x} ‡πÅ‡∏•‡∏∞ {selected_y}"
                            )
                        elif plot_type == "Bar Plot":
                            fig_relation = px.bar(
                                df_selection,
                                x=selected_x,
                                y=selected_y,
                                title=f"Bar Plot ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {selected_x} ‡πÅ‡∏•‡∏∞ {selected_y}"
                            )

                        st.plotly_chart(fig_relation, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå")

        else:
            df = load_data_csv(source_csv_sub)
            
if __name__ == "__main__":
    main()