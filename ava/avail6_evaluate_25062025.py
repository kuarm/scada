import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

def plot_avg(df):
    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    df_avg = df.copy()

    # ‡πÅ‡∏õ‡∏•‡∏á "Availability (%)" ‡πÄ‡∏õ‡πá‡∏ô float
    df_avg["Availability (%)"] = df_avg["Availability (%)"].replace({",": "", "%": ""}, regex=True)
    df_avg["Availability (%)"] = pd.to_numeric(df_avg["Availability (%)"], errors="coerce")

    # ‡πÅ‡∏õ‡∏•‡∏á "Availability Period" ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á "Month"
    df_avg["Month"] = pd.to_datetime(df_avg["Availability Period"], format="%Y-%m", errors="coerce")
    df_avg["Month_str"] = df_avg["Month"].dt.to_period("M").astype(str)

    # ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    df_avg = df_avg.dropna(subset=["Availability (%)", "Device", "Month_str"])

    # --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Filter) ---
    all_months = sorted(df_avg["Month_str"].unique())
    selected_months = st.multiselect("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", all_months, default=all_months)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_avg = df_avg[df_avg["Month_str"].isin(selected_months)]

    # --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device (Filter) ---
    all_devices = sorted(df_avg["Device"].unique())
    selected_devices = st.multiselect("üñ•Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", all_devices, default=all_devices)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Device ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    df_avg = df_avg[df_avg["Device"].isin(selected_devices)]

    # --- üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å Device ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ---
    monthly_avg = df_avg.groupby("Month_str")["Availability (%)"].mean().reset_index()
    monthly_avg["Availability (%)"] = monthly_avg["Availability (%)"].round(2)

    fig_total_avg = px.line(
        monthly_avg,
        x="Month_str",
        y="Availability (%)",
        markers=True,
        title="üìà ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Device ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        )
    fig_total_avg.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Average Availability (%)",
        yaxis=dict(range=[0, 105]),
        hovermode="x unified"
        )

    # --- üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2: Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device ---
    device_monthly = df_avg.groupby(["Month_str", "Device"])["Availability (%)"].mean().reset_index()
    device_monthly["Availability (%)"] = device_monthly["Availability (%)"].round(2)

    fig_by_device = px.line(
        device_monthly,
        x="Month_str",
        y="Availability (%)",
        color="Device",
        markers=True,
        title="üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device"
        )
    fig_by_device.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 105]),
        hovermode="x unified"
        )

    # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
    #st.plotly_chart(fig_total_avg, use_container_width=True)
    #st.plotly_chart(fig_by_device, use_container_width=True)

    fig_scatter = px.scatter(
        df_avg,
        x="Device",
        y="Availability (%)",
        color="Month_str",  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        title="üìç Availability (%) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device (Scatter)",
        hover_data=["Month_str"],  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô hover
        )

    fig_scatter.update_layout(
        xaxis_title="Device",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 105]),
        xaxis_tickangle=-45,
        height=600
        )

    st.plotly_chart(fig_scatter, use_container_width=True)
    
def plot(df,type):
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df_line = df_combined.copy()

    # ‡πÅ‡∏õ‡∏•‡∏á Availability ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df_line["Availability (%)"] = df_line["Availability (%)"].replace({",": "", "%": ""}, regex=True)
    df_line["Availability (%)"] = pd.to_numeric(df_line["Availability (%)"], errors="coerce")

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_line["Month"] = pd.to_datetime(df_line["Availability Period"], format="%Y-%m", errors="coerce")
    df_line["Month_str"] = df_line["Month"].dt.to_period("M").astype(str)

    # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_months = sorted(df_line["Month_str"].dropna().unique())

    # üß≠ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    selected_months = st.multiselect("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á (‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)", all_months, default=all_months)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    filtered_df = df_line[df_line["Month_str"].isin(selected_months)]

    # ‡∏ß‡∏≤‡∏î Line Plot: Availability ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    fig = px.line(
        filtered_df,
        x="Month_str",
        y="Availability (%)",
        color="Device",
        markers=True,
        title="üìà Availability (%) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
    )

    fig.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 105]),
        hovermode="x unified"
    )

    st.plotly_chart(fig, use_container_width=True)

def Plot_summary(df):
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡πÅ‡∏ö‡∏ö Long format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö plot
    plot_df = df.copy()
    plot_df["Month"] = pd.to_datetime(plot_df["Availability Period"], format="%Y-%m", errors="coerce")
    plot_df["Month_num"] = plot_df["Month"].dt.month
    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    plot_df["Month_name"] = plot_df["Month_num"].apply(lambda x: month_names[x - 1] if pd.notnull(x) else "")

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Month_name ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á)
    plot_df = plot_df[plot_df["Month_name"] != ""]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
    fig = px.line(
        plot_df,
        x="Month_name",
        y="Availability (%)",
        color="Device",
        markers=True,
        title="üìà Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device",
    )

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    fig.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 100]),
        legend_title="Device",
        margin=dict(t=60, b=40)
    )

    # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Streamlit
    st.plotly_chart(fig, use_container_width=True)

def df_addColMonth(df):
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
    df["Month_num"] = df["Month"].dt.month
    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    df["Month_name"] = df["Month_num"].apply(lambda x: month_names[x - 1] if pd.notnull(x) else "")

    # Pivot table: row = Device, column = Month_name, values = Availability (%)
    pivot_df = df.pivot_table(
        index="Device",
        columns="Month_name",
        values="Availability (%)",
        aggfunc="mean"
    )

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    pivot_df = pivot_df.reindex(columns=month_names)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    pivot_df["Avg Availability (%)"] = pivot_df.mean(axis=1)

    # Reset index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Device ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    pivot_df = pivot_df.reset_index()

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    pivot_df = pivot_df.round(2)
    
    return pivot_df

def evaluate(df,bins,labels,flag):
    #‡πÄ‡∏û‡∏¥‡πà‡∏° Month
    df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
    df["Month_str"] = df["Month"].dt.strftime("%Y-%m")
    df["Availability (%)"] = df["Availability (%)"] * 100

    all_month_summaries = []  # üîπ ‡∏£‡∏ß‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    def evaluate_result(row):
        if row == "90 < Availability (%) <= 100": #label == "90 < Availability (%) <= 100": ‡∏£‡∏±‡∏ö String
            return "‚úÖ"
        elif row == "80 < Availability (%) <= 90":
            return "‚ö†Ô∏è"
        else:
            return "‚ùå"
        
    # üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° (PEA ‡∏´‡∏£‡∏∑‡∏≠ Producer)
    def evaluate_group(df_group, owner_label):
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
        df_group["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(df["Availability (%)"], bins=bins, labels=labels, right=True)
        #df_pea = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == "PEA ‡∏î‡∏π‡πÅ‡∏•"] #df_Producer = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == "Producer ‡∏î‡∏π‡πÅ‡∏•"]

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
        df_group["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = df_group["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].apply(evaluate_result)

        # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        month_summary = df_group.groupby("Month_str")["Availability (%)"].mean().reset_index()
        month_summary["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(month_summary["Availability (%)"], bins=bins, labels=labels)
        month_summary["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = month_summary["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].apply(evaluate_result)
        month_summary["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] = df_group.groupby("Month_str")["Device"].nunique().values
        month_summary["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] = owner_label  # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
        #month_summary["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = month_summary["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].apply(
        #    lambda x: "‚úÖ" if x == "90 < Availability (%) <= 100" else ("‚ö†Ô∏è" if x == "80 < Availability (%) <= 90" else "‚ùå")
        #)

        month_summary_re = month_summary.rename(columns={
                "Month_str": "‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
                "Availability (%)": "Avg.Availability (%)"
            })
        
        return month_summary_re
         
    # üî∏ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
    for owner_label in ["PEA ‡∏î‡∏π‡πÅ‡∏•", "Producer ‡∏î‡∏π‡πÅ‡∏•"]:
        df_group = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == owner_label].copy()
        if not df_group.empty:
            summary = evaluate_group(df_group, owner_label)
            all_month_summaries.append(summary)

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
    final_month_summary = pd.concat(all_month_summaries, ignore_index=True)
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ sort
    final_month_summary["‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-dt"] = pd.to_datetime(final_month_summary["‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"], format="%Y-%m", errors="coerce")
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    final_month_summary = final_month_summary.sort_values(by="‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-dt")
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö
    final_month_summary.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(final_month_summary) + 1))
    # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡πà‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    final_month_summary = final_month_summary.drop(columns=["‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-dt"])
    ### ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    st.info(f"üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡∏Ç‡∏≠‡∏á {flag} (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)")
    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏î‡∏¢‡∏ã‡πà‡∏≠‡∏ô index ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    st.dataframe(final_month_summary, use_container_width=True, hide_index=True)

    #fig_bar1 = px.bar(final_month_summary, x="‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", y="Avg.Availability (%)", color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", barmode="group")
    #st.plotly_chart(fig_bar1, use_container_width=True)

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    device_avg = df_group.groupby("Device")["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "Avg. Availability (%)"]
    device_avg["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = pd.cut(device_avg["Avg. Availability (%)"], bins=bins, labels=labels)
    device_avg["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] = device_avg["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].apply(evaluate_result)
    #‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á device_avg)
    total_months = df_group["Month"].nunique()

    ### ‚úÖ
    st.info(f"‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• Availability (%) ‡∏£‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {total_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°{flag}")
    st.dataframe(device_avg)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    overall_avg = df["Availability (%)"].mean()
    total_row = pd.DataFrame({
        "Month_str": ["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
        "Availability (%)": [overall_avg],
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [pd.cut([overall_avg], bins=bins, labels=labels)[0]],
        "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [evaluate_result({"‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": pd.cut([overall_avg], bins=bins, labels=labels)[0]})],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": [df["Device"].nunique()]
    })
    #summary_df = pd.concat([final_month_summary, total_row], ignore_index=True)
    #summary_df["Device+Percent"] = summary_df.apply(lambda row: f"{int(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device']):,}", axis=1)
    return final_month_summary, device_avg

    
    
    def test():
        """
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        summary_df = df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"].value_counts().reset_index()
        summary_df.columns = ["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
        summary_df = df.groupby(["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
        # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device" ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏≠‡∏≠‡∏Å
        summary_df = summary_df[summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] > 0]
        # ‡∏•‡∏ö index ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å summary_df
        summary_df = summary_df.reset_index(drop=True)
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Availability (%) ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        df["Availability Range"] = pd.cut(
            df["Availability (%)"], bins=bins, labels=labels, right=True
        )
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Device
        total_devices = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
        summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = (summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] / total_devices) * 100
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        #summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].map("{:.2f}%".format)
        summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].round(2)

        cols = ['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô','‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'] + [col for col in df.columns if col != '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô' and 
                                                    col != '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô']
        cols_show = ["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device+Percent"]
        #df = df[[
        #    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device", "description", "Availability (%)",
        #    "Initializing Count", "Initializing Duration (seconds)",
        #    "Telemetry Failure Count", "Telemetry Failure Duration (seconds)",
        #    "Connecting Count", "Connecting Duration (seconds)", "Month", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Availability Range"
        #]]
        # ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device
        total_row = pd.DataFrame({
            "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": ["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
            "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô": [""],
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device": [summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].sum()],
            "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)": [100.0]  # ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏∑‡∏≠ 100%
        })

        # ‚ú® ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö summary_df
        summary_df = pd.concat([summary_df, total_row], ignore_index=True)
        summary_df = summary_df[["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", 
                                "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                                "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"]]
        # ‚úÖ Format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢‡πÜ
        summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"] = summary_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"].apply(lambda x: f"{x:,}")
        summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"] = summary_df["‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)"].apply(lambda x: f"{x:.2f}%")
        summary_df["Device+Percent"] = summary_df.apply(
            lambda row: f"{row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device']} ({row['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)']})", axis=1
            )
        summary_df = summary_df[["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", 
                                "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                                "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)",
                                "Device+Percent"]]
        show_df = summary_df.copy()[cols_show]
        fig1 = px.bar(
            #summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],  # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ plot,
            summary_df,
            x="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            color="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            barmode="group",
            title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        )
        # ‚úÖ Pie Chart ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
        fig2 = px.pie(
            summary_df[summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
            names="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title="‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            hole=0.4
        )
        fig2.update_traces(textinfo='percent+label')
    
        # Bar Chart
        fig1 = px.bar(
            summary_df[summary_df["Month_str"] != "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
            x="Month_str",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            color="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            text="Device+Percent",
            barmode="group",
            title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
        )

        # Pie Chart
        fig2 = px.pie(
            summary_df[summary_df["Month_str"] == "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
            names="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
            values="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            hole=0.4
        )
        fig2.update_traces(textinfo="percent+label")

        show_df = summary_df[["Month_str", "Availability (%)", "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô", "Device+Percent"]]
        """

def range_ava(df,bins,labels,flag):
    filtered_df["Availability Group"] = pd.cut(filtered_df["Availability (%)"], bins=bins, labels=labels, right=True)
    filtered_by_group = filtered_df[filtered_df["Availability Group"].isin(selected_group)]
    grouped_counts = filtered_by_group["Availability Group"].value_counts().sort_index().reset_index()
    grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"}, inplace=True)
    fig3 = px.bar(
                grouped_counts,
                x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
                title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
            )
    fig3.update_layout(
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
            showlegend=False,
            )
    st.plotly_chart(fig3, use_container_width=True)

def convert_thai_date(date_str):
    thai_months = {
        '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
        '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
        '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
    }
    for th_month, num_month in thai_months.items():
        if th_month in date_str:
            return date_str.replace(th_month, num_month)
    return date_str

def convert_date(df):
    #df['Availability Period'] = df['Availability Period'].astype(str).apply(convert_thai_date)
    df['Availability Period'] = pd.to_datetime(df['Availability Period'], format='%Y-%m')
    df['Month'] = df['Availability Period'].dt.to_period('M')
    months = sorted(df['Month'].dropna().unique().astype(str))
    return df, months

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á label
def get_color(label):
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á ‡πÄ‡∏ä‡πà‡∏ô "0-10 %" ‚Üí 10
        upper = int(label.split("-")[1].strip().replace("%", ""))
        if upper <= 80:
            return "red"
        elif upper <= 90:
            return "yellow"
        else:
            return "green"
    except:
        return "gray"

def ranking(df):
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Ranking ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"
    df_group = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == "PEA ‡∏î‡∏π‡πÅ‡∏•"]  # ‡∏´‡∏£‡∏∑‡∏≠ "Producer ‡∏î‡∏π‡πÅ‡∏•"

    device_avg = df_group.groupby("Device")["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "Avg Availability (%)"]
    device_avg["Rank"] = device_avg["Avg Availability (%)"].rank(ascending=False, method="min").astype(int)
    device_avg = device_avg.sort_values(by="Rank").reset_index(drop=True)

    st.info("üìà ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡∏Ç‡∏≠‡∏á PEA ‡∏î‡∏π‡πÅ‡∏•")
    st.dataframe(device_avg)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device
    device_avg = df.groupby("Device")["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "Avg Availability (%)"]

    # ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î)
    device_avg["Rank"] = device_avg["Avg Availability (%)"].rank(ascending=False, method="min").astype(int)

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏•‡∏á‡∏°‡∏≤
    device_avg = device_avg.sort_values(by="Rank").reset_index(drop=True)

    device_avg["Avg Availability (%)"] = device_avg["Avg Availability (%)"] * 100

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Ranking
    st.info("üìà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏£‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    st.dataframe(device_avg)

def rank_availability(df):
    st.subheader("üìä ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)")

    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°
    for owner in ["PEA ‡∏î‡∏π‡πÅ‡∏•", "Producer ‡∏î‡∏π‡πÅ‡∏•"]:
        df_group = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == owner].copy()

        if df_group.empty:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° '{owner}'")
            continue

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Avg. Availability (%) ‡∏ï‡πà‡∏≠ Device
        device_avg = df_group.groupby("Device")["Availability (%)"].mean().reset_index()
        device_avg.columns = ["Device", "Avg Availability (%)"]

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
        device_avg["Rank"] = device_avg["Avg Availability (%)"].rank(method="min", ascending=False).astype(int)

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
        device_avg = device_avg.sort_values(by="Rank").reset_index(drop=True)

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.markdown(f"### üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° {owner}")
        st.dataframe(device_avg)

def rank_and_plot_top10(df):
    st.subheader("üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

    for owner in ["PEA ‡∏î‡∏π‡πÅ‡∏•", "Producer ‡∏î‡∏π‡πÅ‡∏•"]:
        df_group = df[df["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"] == owner].copy()

        if df_group.empty:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° '{owner}'")
            continue

        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        device_avg = df_group.groupby("Device")["Availability (%)"].mean().reset_index()
        device_avg.columns = ["Device", "Avg Availability (%)"]

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
        device_avg["Rank"] = device_avg["Avg Availability (%)"].rank(method="min", ascending=False).astype(int)

        # ‚úÖ Top 10
        top10 = device_avg.sort_values(by="Rank").head(10)

        # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü Plotly
        fig = px.bar(
            top10.sort_values(by="Avg Availability (%)"),  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô
            x="Avg Availability (%)",
            y="Device",
            orientation="h",
            text="Avg Availability (%)",
            title=f"üìä Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ({owner})",
            color="Avg Availability (%)",
            color_continuous_scale="Greens" if "PEA" in owner else "Blues"
        )

        fig.update_layout(
            xaxis_title="Availability (%)",
            yaxis_title="Device",
            yaxis=dict(autorange="reversed"),  # ‡πÉ‡∏´‡πâ Rank 1 ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
            height=500,
            margin=dict(t=50, b=50)
        )

        fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")
        st.plotly_chart(fig, use_container_width=True)

def rank_plot_top10_combined(df):
    st.subheader("üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)")

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡∏ß‡∏°
    device_avg["Rank"] = device_avg["Avg Availability (%)"].rank(method="min", ascending=False).astype(int)

    # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Top 10
    top10_combined = device_avg.sort_values(by="Rank").head(10)

    # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    fig = px.bar(
        top10_combined.sort_values(by="Avg Availability (%)"),
        x="Avg Availability (%)",
        y="Device",
        color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        orientation="h",
        text="Avg Availability (%)",
        title="üìä Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)",
        color_discrete_map={
            "PEA ‡∏î‡∏π‡πÅ‡∏•": "#2ECC71",      # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            "Producer ‡∏î‡∏π‡πÅ‡∏•": "#3498DB"  # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        }
    )

    fig.update_layout(
        xaxis_title="Availability (%)",
        yaxis_title="Device",
        yaxis=dict(autorange="reversed"),
        height=500,
        margin=dict(t=50, b=50)
    )

    fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")

    st.plotly_chart(fig, use_container_width=True)

def bar_compare_caretakers(df):
    st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•")

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå + ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü Bar ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    fig = px.bar(
        device_avg,
        x="Device",
        y="Avg Availability (%)",
        color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        barmode="group",  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÅ‡∏ó‡πà‡∏á
        text="Avg Availability (%)",
        title="üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Grouped Bar)",
        color_discrete_map={
            "PEA ‡∏î‡∏π‡πÅ‡∏•": "#2ECC71",
            "Producer ‡∏î‡∏π‡πÅ‡∏•": "#3498DB"
        }
    )

    fig.update_layout(
        xaxis_title="Device",
        yaxis_title="Availability (%)",
        xaxis_tickangle=-45,
        height=600,
        margin=dict(t=60, b=80)
    )

    fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")

    st.plotly_chart(fig, use_container_width=True)

def bar_stacked_top10(df):
    st.subheader("üìä Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Stacked Bar ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)")
    
    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå + ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏ß‡∏° per Device (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Top 10)
    top_devices = device_avg.groupby("Device")["Avg Availability (%)"].mean().nlargest(10).index

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top 10
    df_top10 = device_avg[device_avg["Device"].isin(top_devices)]
    df_top10["Avg Availability (%)"] = df_top10["Avg Availability (%)"] * 100
    # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü Stacked Bar
    fig = px.bar(
        df_top10,
        x="Device",
        y="Avg Availability (%)",
        color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        barmode="stack",
        text="Avg Availability (%)",
        title="üìä Top 10 Availability (%) ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Stacked Bar)",
        color_discrete_map={
            "PEA ‡∏î‡∏π‡πÅ‡∏•": "#2ECC71",
            "Producer ‡∏î‡∏π‡πÅ‡∏•": "#3498DB"
        }
    )

    fig.update_layout(
        xaxis_title="Device",
        yaxis_title="Availability (%)",
        xaxis_tickangle=-45,
        height=600,
        margin=dict(t=60, b=80)
    )

    fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")

    st.plotly_chart(fig, use_container_width=True)

def bar_grouped_top10(df):
    st.subheader("üìä Top 10 Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Grouped Bar ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)")

    # ‚úÖ 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device + ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ 2. ‡∏´‡∏≤ Top 10 Device ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    top_devices = device_avg.groupby("Device")["Avg Availability (%)"].mean().nlargest(10).index

    # ‚úÖ 3. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Device ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    df_top10 = device_avg[device_avg["Device"].isin(top_devices)]

    # ‚úÖ 4. ‡∏ß‡∏≤‡∏î Grouped Bar
    fig = px.bar(
        df_top10,
        x="Device",
        y="Avg Availability (%)",
        color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
        barmode="group",
        text="Avg Availability (%)",
        title="üìä Top 10 Availability (%) ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• (Grouped Bar)",
        color_discrete_map={
            "PEA ‡∏î‡∏π‡πÅ‡∏•": "#2ECC71",
            "Producer ‡∏î‡∏π‡πÅ‡∏•": "#3498DB"
        }
    )

    fig.update_layout(
        xaxis_title="Device",
        yaxis_title="Availability (%)",
        xaxis_tickangle=-45,
        height=600,
        margin=dict(t=60, b=80)
    )

    fig.update_traces(texttemplate="%{text:.2f}%", textposition="outside")

    st.plotly_chart(fig, use_container_width=True)

def show_top10_table(df):
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    device_avg_sorted = device_avg.sort_values(by="Avg Availability (%)", ascending=False).reset_index(drop=True)
    device_avg_sorted["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"] = device_avg_sorted.index + 1

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Top 10 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    st.markdown("### üü¢ Top 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    st.dataframe(device_avg_sorted.head(10).style.format({"Avg Availability (%)": "{:.2f}"}), use_container_width=True)

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Top 10 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    st.markdown("### üî¥ Top 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
    st.dataframe(device_avg_sorted.tail(10).sort_values("Avg Availability (%)").style.format({"Avg Availability (%)": "{:.2f}"}), use_container_width=True)

def show_top10_combined_table(df):
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    device_avg_sorted = device_avg.sort_values(by="Avg Availability (%)", ascending=False).reset_index(drop=True)
    device_avg_sorted["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"] = device_avg_sorted.index + 1

    # ‚úÖ ‡πÅ‡∏¢‡∏Å Top 10 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    top10 = device_avg_sorted.head(10).copy()
    top10["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "üîº Top 10 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"

    # ‚úÖ ‡πÅ‡∏¢‡∏Å Top 10 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    bottom10 = device_avg_sorted.tail(10).copy()
    bottom10["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "üîΩ Bottom 10 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    combined_df = pd.concat([top10, bottom10], ignore_index=True)

    # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤ Top 10 ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    combined_df = combined_df.sort_values(by=["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "Avg Availability (%)"], ascending=[True, False])

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.dataframe(combined_df[["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", "Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]].style.format({
        "Avg Availability (%)": "{:.2f}"
    }), use_container_width=True)

def show_top10_combined_table_(df):
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device
    device_avg = df.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()
    device_avg.columns = ["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)"]

    # ‚úÖ ‡πÅ‡∏¢‡∏Å Device ‡∏ó‡∏µ‡πà Avg = 0 ‡∏≠‡∏≠‡∏Å
    excluded_zero_df = device_avg[device_avg["Avg Availability (%)"] == 0]
    device_avg = device_avg[device_avg["Avg Availability (%)"] > 0]

    device_avg["Avg Availability (%)"] = device_avg["Avg Availability (%)"] * 100
    
    # ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    device_avg_sorted = device_avg.sort_values(by="Avg Availability (%)", ascending=False).reset_index(drop=True)
    device_avg_sorted["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"] = device_avg_sorted.index + 1

    # ‚úÖ ‡πÅ‡∏¢‡∏Å Top 10 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    top10 = device_avg_sorted.head(10).copy()
    top10["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "üîº Top 10 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"

    # ‚úÖ ‡πÅ‡∏¢‡∏Å Bottom 10 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
    bottom10 = device_avg_sorted.tail(10).copy()
    bottom10["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "üîΩ Bottom 10 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    combined_df = pd.concat([top10, bottom10], ignore_index=True)
    combined_df = combined_df.sort_values(by=["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "Avg Availability (%)"], ascending=[True, False])

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.dataframe(
        combined_df[["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", "Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Avg Availability (%)", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]]
        .style.format({"Avg Availability (%)": "{:.10f}"}),
        use_container_width=True
    )

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    num_excluded = len(excluded_zero_df)
    if num_excluded > 0:
        st.markdown(f"> ‚ÑπÔ∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏ï‡∏±‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Avg Availability = 0 ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **{num_excluded} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**")

# ---- Upload and Merge ----
uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    
    for uploaded_file in uploaded_files:
        df = pd.read_excel(uploaded_file)

        if "Availability Period" not in df.columns:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
            continue
        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
        df["Availability (%)"] = df["Availability (%)"].replace({",": "", "%": ""}, regex=True)
        df["Availability (%)"] = pd.to_numeric(df["Availability (%)"], errors="coerce")
        df = df[df["‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"] == "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"]
        all_data.append(df)

    df_combined = pd.concat(all_data, ignore_index=True)
    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    flag = st.selectbox("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", ["‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"])
    title = flag  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü
    show_top10_combined_table_(df_combined)
    
    #owner = st.selectbox("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", ["PEA ‡∏î‡∏π‡πÅ‡∏•", "Producer ‡∏î‡∏π‡πÅ‡∏•"])
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Device ‡∏ï‡∏≤‡∏° flag
    
    #new_device_column_name = "PEA ‡∏î‡∏π‡πÅ‡∏•" if owner == "PEA ‡∏î‡∏π‡πÅ‡∏•" else "Producer ‡∏î‡∏π‡πÅ‡∏•"
    #pivot.index.name = new_device_column_name

    

    func_select = st.sidebar.radio(label="function: ", options = option_func)   
    if func_select == '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•':
        bins_eva = [0, 80, 90, 100]
        labels_eva = ["0 <= Availability (%) <= 80", "80 < Availability (%) <= 90", "90 < Availability (%) <= 100"]
        cols = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + title
        df_evaluate = df_combined.copy()

        monthly_avg, device_avg = evaluate(df_evaluate,bins_eva,labels_eva,title)

        # ‚úÖ Pivot ‡πÅ‡∏™‡∏î‡∏á Availability ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        pivot_df = df_addColMonth(df)
        pivot_df.rename(columns={"Device": flag}, inplace=True)
        st.info(f"‚úÖ ‡∏™‡∏£‡∏∏‡∏õ Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á {flag}")
        st.write(pivot_df)
        #st.plotly_chart(fig1)#st.plotly_chart(fig2)#st.dataframe(show_df)
        #show_df.rename(columns={"Device+Percent": cols}, inplace=True)
        #st.markdown("### üîπ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Availability (%) ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤")#st.dataframe(show_df)
        header_colors = ['#003366', '#006699', '#0099CC']   # ‡∏™‡∏µ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        cell_colors = ['#E6F2FF', '#D9F2D9', '#FFF2CC']     # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        """
        fig3 = go.Figure(data=[go.Table(
            header=dict(
                values=[
                    "<b>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</b>",
                    "<b>‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£<br>‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</b>",
                    f"<b>{cols}</b>"
                ],
                fill_color=header_colors,
                align=["center", "center", "center"],
                font=dict(color='white', size=14)
            ),
            cells=dict(
                values=[
                    summary_df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"],
                    summary_df["‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"],
                    summary_df["Device+Percent"]
                ],
                fill_color=[cell_colors[0]] * len(summary_df.columns),
                align='center',
                font=dict(color='black', size=13)
            )
        )])

        fig3.update_layout(
            title=dict(
                text=f"üîπ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Availability (%) ‡∏Ç‡∏≠‡∏á {cols.replace('<br>', ' ')}",
                x=0.5,  # ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                xanchor='center',
                font=dict(size=20)
                ),
                margin=dict(t=60, b=20)
        )
        #st.plotly_chart(fig3, use_container_width=True)
        """
    elif func_select == 'Histogram':
        
        df_histogram = df_combined.copy()  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SettingWithCopyWarning
        # ‡∏•‡∏ö % ‡πÅ‡∏•‡∏∞ comma ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        df_histogram["Availability (%)"] = df_histogram["Availability (%)"].replace({",": "", "%": ""}, regex=True)
        df_histogram["Availability (%)"] = pd.to_numeric(df_histogram["Availability (%)"], errors="coerce")
        #add ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢)
        df_histogram["Month"] = pd.to_datetime(df_histogram["Availability Period"], format="%Y-%m", errors="coerce")
        df_histogram["Month_num"] = df_histogram["Month"].dt.month
        df_histogram["Month_year"] = df_histogram["Month"].dt.to_period("M").astype(str)  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 2025-03
        #thai_months = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                    #'‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
        #df_histogram["Month_name"] = df_histogram["Month_num"].apply(lambda x: thai_months[x - 1] if pd.notnull(x) else "")
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Availability (%) ‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
        df_avg_device = df_histogram.groupby(["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"])["Availability (%)"].mean().reset_index()

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Availability
        bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
        labels = [f"{bins[i]}-{bins[i+1]} %" for i in range(len(bins)-1)]
        df_histogram["Availability (%)"] = df_histogram["Availability (%)"] * 100
        df_avg_device["Availability (%)"] = df_avg_device["Availability (%)"] * 100
        df_histogram["Availability Group"] = pd.cut(df_histogram["Availability (%)"], bins=bins, labels=labels, right=True)
        df_avg_device["Availability Group"] = pd.cut(df_avg_device["Availability (%)"], bins=bins, labels=labels, right=True)
        st.dataframe(df_avg_device)
        total_months = df_histogram["Month"].nunique()
        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Selectbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ---
        available_months = sorted(df_histogram["Month_year"].dropna().unique())
        selected_month = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π Histogram", available_months)

        # --- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
        filtered_df = df_histogram[df_histogram["Month_year"] == selected_month]

        # Group ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        #grouped_counts = df_histogram.groupby(["Month_name", "Availability Group"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")
        #grouped_counts = df_histogram["Availability Group"].value_counts().sort_index().reset_index() ###‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Histogram ---
        grouped_counts = filtered_df["Availability Group"].value_counts().sort_index().reset_index()
        grouped_counts.columns = ["‡∏ä‡πà‡∏ß‡∏á % Availability", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
        #grouped_counts_avg = df_avg_device["Availability Group"].value_counts().sort_index().reset_index()
        #grouped_counts_avg.columns = ["‡∏ä‡πà‡∏ß‡∏á % Availability", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device"]
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
        grouped_counts_avg = df_avg_device.groupby(["‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Availability Group"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")

        """
        # Plot ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        fig_old = px.bar(
            grouped_counts,
            x="Availability Group",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            color="Month_name",
            barmode="group",  # ‡∏´‡∏£‡∏∑‡∏≠ "stack" ‡∏Å‡πá‡πÑ‡∏î‡πâ
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title="üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig_old.update_layout(
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            yaxis_type="log"
        )
        """
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
        fig = px.bar(
            grouped_counts,
            x="‡∏ä‡πà‡∏ß‡∏á % Availability",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            color="‡∏ä‡πà‡∏ß‡∏á % Availability",
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title=f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month})",
            color_discrete_sequence=[
                "#FF0000", "#FF4000", "#FF8000", "#FFBF00", "#FFFF00",
                "#BFFF00", "#80FF00", "#40FF00", "#00FF00", "#00CC00"
            ]
        )
        fig.update_layout(
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô{title}",
            showlegend=True,                 # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Legend
            legend_title="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"         # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Legend
        )

        fig.update_traces(texttemplate="%{text:,}", textposition="outside")

        #st.plotly_chart(fig, use_container_width=True)

        fig_bar_avg = px.bar(
            grouped_counts_avg,
            x="Availability Group",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            color="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•",
            barmode="group",  # ‡πÅ‡∏¢‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ô # ‡∏´‡∏£‡∏∑‡∏≠ "stack" ‡∏Å‡πá‡πÑ‡∏î‡πâ
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title=f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô{title} ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {total_months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            category_orders={"Availability Group": labels},  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
            color_discrete_sequence=px.colors.qualitative.Set2
            #color_discrete_sequence=[
            #    "#FF0000", "#FF4000", "#FF8000", "#FFBF00", "#FFFF00",
            #    "#BFFF00", "#80FF00", "#40FF00", "#00FF00", "#00CC00"
            #]
        )
        fig_bar_avg.update_layout(
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô{title}",
            showlegend=True,
            legend_title="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•" # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Legend
        )
        fig_bar_avg.update_traces(texttemplate="%{text:,}", textposition="outside")

        st.plotly_chart(fig_bar_avg, use_container_width=True)

        typeplot = "Line"
        plot(df_combined,typeplot)
        plot_avg(df_combined)

        fig2 = px.bar(
            grouped_counts,
            x="Availability Group",
            y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            facet_col="Month_name",
            color="Availability Group",
            text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
            title="üìä Availability Distribution ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÅ‡∏¢‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
            category_orders={"Availability Group": labels},
            color_discrete_sequence=px.colors.sequential.YlGn
        )

        fig2.update_layout(
            height=500,
            showlegend=False,
            yaxis_type="log"
        )
        fig2.update_traces(texttemplate="%{text:,}", textposition="outside")

        st.plotly_chart(fig2, use_container_width=True)
        cols = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " + title
        grouped_counts.rename(columns={"Availability Group": "‡∏ä‡πà‡∏ß‡∏á % Availability","count": cols}, inplace=True)
        fig = px.bar(
                    grouped_counts,
                    x="‡∏ä‡πà‡∏ß‡∏á % Availability",
                    y=cols,
                    color="‡∏ä‡πà‡∏ß‡∏á % Availability",
                    text=cols,
                    title=f"üìä {cols}‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability",
                    color_discrete_sequence=[
                        "#FF0000", "#FF4000", "#FF8000", "#FFBF00", "#FFFF00",
                        "#BFFF00", "#80FF00", "#40FF00", "#00FF00", "#00CC00"
                        ]  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÑ‡∏•‡πà‡∏à‡∏≤‡∏Å‡πÅ‡∏î‡∏á‡πÑ‡∏õ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                        )
        fig.update_layout(
                xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
                yaxis_title=cols,
                showlegend=False,
                )
        fig.update_traces(
                texttemplate="%{text:,}",  # ‡πÉ‡∏™‡πà comma
                textposition="outside"
                )
        st.plotly_chart(fig, use_container_width=True)

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        x_vals = grouped_counts["‡∏ä‡πà‡∏ß‡∏á % Availability"]
        y_vals = grouped_counts[cols]
        colors = [get_color(x) for x in x_vals]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig11 = go.Figure(data=[go.Bar(
            x=x_vals,
            y=y_vals,
            text=[f"{int(v):,}" for v in y_vals],  # ‡πÉ‡∏™‡πà comma
            textposition="outside",
            marker_color=colors
        )])
        # ‡∏õ‡∏£‡∏±‡∏ö layout
        fig11.update_layout(
            title=f"üìä {cols}‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % Availability (log scale)",
            xaxis_title="‡∏ä‡πà‡∏ß‡∏á % Availability",
            yaxis_type="log",  # ‡πÉ‡∏ä‡πâ log scale
            yaxis_title=cols,
            showlegend=False,
            margin=dict(t=60, b=40)
        )

        st.plotly_chart(fig11, use_container_width=True)
    elif func_select == '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':
        st.write("n/a")
        
    elif func_select == '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô':
        """
        # ---- Upload and Merge ----
        uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

        if uploaded_files:
            all_data = []

            for uploaded_file in uploaded_files:
                df = pd.read_excel(uploaded_file)

                if "Availability Period" not in df.columns:
                    st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
                    continue

                df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
                df["Availability (%)"] = df["Availability (%)"].replace({",": "", "%": ""}, regex=True)
                df["Availability (%)"] = pd.to_numeric(df["Availability (%)"], errors="coerce")

                all_data.append(df)

            df_combined = pd.concat(all_data, ignore_index=True)

            # ---- Monthly Summary ----
            df_combined["Year"] = df_combined["Month"].dt.year
            selected_year = df_combined["Year"].mode()[0]  # ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 2025
            df_combined = df_combined[df_combined["Year"] == selected_year]

            monthly_avg = df_combined.groupby(df_combined["Month"].dt.month)["Availability (%)"].mean().reset_index()
            monthly_avg.columns = ["MonthNumber", "Availability (%)"]

            # ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö 1-12)
            all_months_df = pd.DataFrame({"MonthNumber": list(range(1, 13))})
            monthly_avg = all_months_df.merge(monthly_avg, on="MonthNumber", how="left")
            #monthly_avg["Availability (%)"] = monthly_avg["Availability (%)"].fillna(0)

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                        '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
            monthly_avg["Month"] = monthly_avg["MonthNumber"].apply(lambda x: month_names[x-1])

            # ---- Bar Chart ----
            fig_bar = px.bar(
                monthly_avg,
                x="Month",
                y="Availability (%)",
                text=monthly_avg["Availability (%)"].round(1),
                color="Availability (%)",
                title=f"üìä Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Bar Chart) - ‡∏õ‡∏µ {selected_year}"
            )
            fig_bar.update_layout(
                xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                yaxis_title="Availability (%)",
                yaxis=dict(range=[0, 100]),
                showlegend=False,
                margin=dict(t=60, b=40)
            )
            st.plotly_chart(fig_bar, use_container_width=True)

            # ---- Line Chart ----
            fig_line = px.line(
                monthly_avg,
                x="MonthNumber",
                y="Availability (%)",
                markers=True,
                text=monthly_avg["Availability (%)"].round(1),
                title=f"üìà Availability (%) ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Line Chart) - ‡∏õ‡∏µ {selected_year}"
            )

            fig_line.update_traces(
                textposition="bottom center",  # üëà ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡πâ‡∏ô
                connectgaps=False
            )

            fig_line.update_layout(
                xaxis=dict(
                    title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                    tickmode="array",
                    tickvals=list(range(1, 13)),
                    ticktext=month_names
                ),
                yaxis=dict(
                    title="Availability (%)",
                    range=[0, 105]  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏î‡∏≤‡∏ô‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Å‡∏±‡∏ô‡∏•‡πâ‡∏ô
                ),
                showlegend=False,
                margin=dict(t=80, b=40)  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° margin ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            )

            st.plotly_chart(fig_line, use_container_width=True)
    else:
        st.warning("üö® ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å function")
    """
        df_histogram = df_combined.copy()
    
"""   
uploaded_file = st.file_uploader("üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV", type=["xlsx", "csv"])
if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    else:
        df = pd.read_excel(uploaded_file)
        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
    df_filtered, months = convert_date(df)
"""  

    