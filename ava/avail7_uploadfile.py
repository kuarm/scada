import pandas as pd
import streamlit as st
from io import BytesIO

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà upload ‡∏°‡∏≤
all_data = []

st.title("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏õ‡πá‡∏ô DataFrame
        df = pd.read_excel(uploaded_file)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Availability Period" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if "Availability Period" not in df.columns:
            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period'")
            continue

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Availability Period ‡πÄ‡∏õ‡πá‡∏ô datetime
        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")

        # ‡∏•‡∏ö comma ‡πÅ‡∏•‡∏∞ % ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
        df["Availability (%)"] = df["Availability (%)"].replace({",": "", "%": ""}, regex=True)
        df["Availability (%)"] = pd.to_numeric(df["Availability (%)"], errors="coerce")

        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        all_data.append(df)

    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå
    df_combined = pd.concat(all_data, ignore_index=True)

    # -------------------------------
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_summary = df_combined.groupby("Month")["Availability (%)"].mean().reset_index()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á (‡πÄ‡∏ä‡πà‡∏ô 2025-01 ‡∏ñ‡∏∂‡∏á 2025-12)
    all_months = pd.date_range(start="2025-01-01", end="2025-12-01", freq='MS')
    df_full = pd.DataFrame({"Month": all_months})
    monthly_summary = df_full.merge(monthly_summary, on="Month", how="left")

    monthly_summary["Availability (%)"] = monthly_summary["Availability (%)"].fillna(0)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü bar chart
    import plotly.express as px

    fig_bar = px.bar(
        monthly_summary,
        x="Month",
        y="Availability (%)",
        text=monthly_summary["Availability (%)"].round(1),
        color="Availability (%)",
        title="üìä Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Bar Chart)"
    )
    fig_bar.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="Availability (%)",
        yaxis=dict(range=[0, 100]),
        xaxis=dict(tickformat="%b %Y", tickangle=-45),
        showlegend=False,
    )
    st.plotly_chart(fig_bar, use_container_width=True)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
    fig_line = px.line(
        monthly_summary,
        x="Month",
        y="Availability (%)",
        markers=True,
        title="üìà Availability (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Line Graph)"
    )
    fig_line.update_layout(
        xaxis=dict(tickformat="%b %Y", tickangle=-45),
        yaxis=dict(range=[0, 100]),
        showlegend=False,
    )
    st.plotly_chart(fig_line, use_container_width=True)
