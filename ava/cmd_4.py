import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
from io import StringIO


"""
# üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
uploaded_file = st.file_uploader("üìÅ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å 3 sheet
    sheet_names = ["RTU", "SUBSTATION", "FRTU"]
    dfs = []

    for sheet in sheet_names:
        try:
            df = pd.read_excel(uploaded_file, sheet_name=sheet)
            df["Sheet"] = sheet  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            dfs.append(df)
        except:
            st.warning(f"‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet: {sheet}")

    if not dfs:
        st.error("üìÑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheets ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    else:
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å sheet
        df_all = pd.concat(dfs, ignore_index=True)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if "Device" not in df_all.columns or "Availability Period" not in df_all.columns or "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)" not in df_all.columns:
            st.error("‚ùå ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: 'Device', 'Availability Period', '‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)'")
        else:
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            df_all["Month"] = pd.to_datetime(df_all["Availability Period"], format="%Y-%m", errors="coerce")
            df_all["Month_str"] = df_all["Month"].dt.strftime("%Y-%m")

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å combination ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            all_devices = df_all["Device"].dropna().unique()
            all_months = df_all["Month_str"].dropna().unique()
            index = pd.MultiIndex.from_product([all_devices, all_months], names=["Device", "Month_str"])

            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£
            df_summary = df_all.groupby(["Device", "Month_str"])["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].mean().reset_index()

            # ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            df_full = df_summary.set_index(["Device", "Month_str"]).reindex(index).reset_index()

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            df_missing = df_full[df_full["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].isna()].copy()

            st.success("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            st.dataframe(df_missing, use_container_width=True)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            missing_summary = df_missing.groupby("Month_str")["Device"].count().reset_index()
            missing_summary.columns = ["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
            st.bar_chart(missing_summary.set_index("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"))
"""




#df_rtu = pd.read_excel(xls, sheet_name="RTU")
#df_sub = pd.read_excel(xls, sheet_name="SUBSTATION")
#df_frtu = pd.read_excel(xls, sheet_name="FRTU")

# 2. ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏° sheet ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
#df_all = pd.concat([df_rtu, df_sub, df_frtu], ignore_index=True)

# üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Sheet "Sum"
uploaded_file = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Sheet 'Sum'", type=["xlsx"])

month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                   '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
if uploaded_file:
    try:
        df_sum = pd.read_excel(uploaded_file, sheet_name="Sum")
        df_rtu = pd.read_excel(uploaded_file , sheet_name="RTU")
        df_substation = pd.read_excel(uploaded_file , sheet_name="SUBSTATION")
        df_frtu = pd.read_excel(uploaded_file , sheet_name="FRTU")
        df_rtu["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "RTU"
        df_substation["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "SUBSTATION"
        df_frtu["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] = "FRTU"

        # ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        df_all = pd.concat([df_rtu, df_substation, df_frtu], ignore_index=True)

        df_merged = df_sum.merge(df_all[["Device", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]], on="Device", how="left")
        st.dataframe(df_merged)

    except:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ä‡∏∑‡πà‡∏≠ 'Sum'")
    else:
        # 2. ‡∏Ñ‡∏±‡∏î column ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á
        valid_months = [col for col in month_names if col in df.columns and df[col].notna().any()]
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ df ‡πÄ‡∏õ‡πá‡∏ô wide format
        df = df.melt(
            id_vars=["Device"], 
            value_vars=valid_months, 
            var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
            value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô string
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] * 100

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].map(lambda x: f"{x:.2f}%" if pd.notnull(x) else "-")
        st.dataframe(df)
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        required_cols = ["Device", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]

        if not all(col in df.columns for col in required_cols):
            st.error(f"‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {required_cols}")
        else:
            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏µ Device ‡πÉ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
            #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")

            # ‡∏Ñ‡∏±‡∏î Device ‡∏ó‡∏µ‡πà "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)" ‡πÄ‡∏õ‡πá‡∏ô - 
            #df_missing = df[df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].isna()]
            df_missing = df[df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].astype(str).str.strip() == "-"]
            
            st.dataframe(df_missing)
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            summary = df_missing.groupby("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")["Device"].nunique().reset_index()
            summary.columns = ["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"]

            st.info("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            st.dataframe(summary)

            # ‡πÅ‡∏™‡∏î‡∏á Device ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£
            st.info("üßæ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

            missing_summary_list = []  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export

            for month, group in df_missing.groupby("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"):
                device_list = group["Device"].dropna().unique().tolist()
                st.markdown(f"### üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {month}")
                st.write(f"üî∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(device_list)} ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
                st.write(device_list)

                # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
                for device in device_list:
                    missing_summary_list.append({"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": month, "Device": device})

            #‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
            df_missing_export = pd.DataFrame(missing_summary_list)
            st.dataframe(df_missing_export)

            def to_excel(df):
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name='Missing Devices')
                processed_data = output.getvalue()
                return processed_data

            excel_data = to_excel(df_missing_export)

            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£ (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
                data=excel_data,
                file_name="missing_devices_by_month.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå Excel

            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                for month, group in df_missing.groupby("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"):
                    df_month = group[["Device"]].dropna().drop_duplicates().reset_index(drop=True)
                    sheet_name = str(month)[:31]  # Excel ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 31 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    df_month.to_excel(writer, sheet_name=sheet_name, index=False)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£ (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)",
                data=output.getvalue(),
                file_name="missing_devices_by_month_sheets.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            #‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡πà‡∏≠‡∏ô plot:

            # üîπ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            total_devices_by_month = df.groupby("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")["Device"].nunique()

            # üîπ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£
            missing_devices_by_month = df_missing.groupby("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")["Device"].nunique()

            # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            comparison_df = pd.DataFrame({
                "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": missing_devices_by_month,
                "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": total_devices_by_month - missing_devices_by_month
            }).fillna(0).astype(int).reset_index()

            #üìä Plot ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:
            # üî∏ Melt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Plotly ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ grouped bar
            comparison_melted = comparison_df.melt(id_vars="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
                                                value_vars=["‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"],
                                                var_name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", 
                                                value_name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device")

            # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
            thai_month_order = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                                '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']

            fig = px.bar(
                comparison_melted,
                x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                color="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£",
                barmode="group",
                text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                title="üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ó‡∏µ‡πà‡∏°‡∏µ / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                color_discrete_map={
                    "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": "#00CC66",
                    "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": "#FF4444"
                }
            )
            # üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
            fig2 = px.bar(
                comparison_df,
                x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                y=["‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"],
                barmode="group",
                title="üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device ‡∏ó‡∏µ‡πà‡∏°‡∏µ/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                category_orders={"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": thai_month_order},  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                labels={"value": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device", "variable": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"},
                color_discrete_map={
                    "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": "#FF5733",  # ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á
                    "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": "#2ECC71"     # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                },
                text_auto=True
            )
            fig2.update_traces(
                texttemplate="%{y:,}",  # ‡πÉ‡∏™‡πà comma ‡∏Ñ‡∏±‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1,000
                textposition="outside"  # ‡∏´‡∏£‡∏∑‡∏≠ "auto", "inside", "outside", "top center"
            )
            fig2.update_layout(
                xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
                yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Device",
                legend_title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                bargap=0.2
            )
            st.plotly_chart(fig2, use_container_width=True)

            # üî∏ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏à‡∏≤‡∏Å comparison_df
            def to_excel_download(df):
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£')
                return output.getvalue()

            # üîπ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏à‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)
            export_df = comparison_df[["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"]]
            
            # üî∏ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
            excel_data = to_excel_download(export_df)

            # üî∏ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Excel)",
                data=excel_data,
                file_name="Device_Command_Summary.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

