import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
from io import StringIO
import numpy as np
import io
from plotly.express.colors import qualitative


color_map = {
    "‡∏°.‡∏Ñ. 2025": "#1f77b4",  # ‡∏ü‡πâ‡∏≤
    "‡∏Å.‡∏û. 2025": "#ff7f0e",  # ‡∏™‡πâ‡∏°
    "‡∏°‡∏µ.‡∏Ñ. 2025": "#2ca02c",  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    "‡πÄ‡∏°.‡∏¢. 2025": "#d62728",  # ‡πÅ‡∏î‡∏á
    "‡∏û.‡∏Ñ. 2025": "#9467bd",  # ‡∏°‡πà‡∏ß‡∏á
    "‡∏°‡∏¥.‡∏¢. 2025": "#8c564b",  # ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
    "‡∏Å.‡∏Ñ. 2025": "#e377c2",  # ‡∏ä‡∏°‡∏û‡∏π
    "‡∏™.‡∏Ñ. 2025": "#7f7f7f",  # ‡πÄ‡∏ó‡∏≤
    "‡∏Å.‡∏¢. 2025": "#bcbd22",  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏∞‡∏ô‡∏≤‡∏ß
    "‡∏ï.‡∏Ñ. 2025": "#17becf",  # ‡∏ü‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•
    "‡∏û.‡∏¢. 2025": "#aec7e8",  # ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
    "‡∏ò.‡∏Ñ. 2025": "#ffbb78",  # ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
}

def pivot(df,flag):
    df_pivot = df.copy()
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_pivot["Month"] = pd.to_datetime(df_pivot["Availability Period"], format="%Y-%m", errors="coerce")
    df_pivot["Month_num"] = df_pivot["Month"].dt.month

    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                   '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    df_pivot["Month_name"] = df_pivot["Month_num"].apply(lambda x: month_names[int(x) - 1] if pd.notnull(x) else "")

    pivot_df = df_pivot.pivot_table(
        index="Device",
        columns="Month_name",
        values="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        aggfunc="mean"
    )
    device_meta = df_pivot[["Device", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•"]].drop_duplicates()
    pivot_df = pivot_df.reset_index().merge(device_meta, on="Device", how="left").set_index("Device")
    st.dataframe(pivot_df)
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    pivot_df = pivot_df.reindex(columns=month_names)

    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
    pivot_df["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pivot_df.mean(axis=1, skipna=True)
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
    null_mask = pivot_df.drop(columns="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)").isnull().all(axis=1)
    devices_all_null = pivot_df[null_mask].index.tolist()

    if devices_all_null:
        st.warning(f"üîç ‡∏û‡∏ö {len(devices_all_null)} ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ:")
        st.write(devices_all_null)
    
    pivot_df_numeric = pivot_df.copy()  # ‡∏Å‡πà‡∏≠‡∏ô format

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (xx.xx%) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN
    def format_percent(val):
        return f"{val:.2f}%" if pd.notnull(val) else "-"
    
    for col in month_names + ["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]:
        if col in pivot_df.columns:
            pivot_df[col] = pivot_df[col].apply(format_percent)
    
    pivot_df_display = pivot_df.reset_index()
    
    pivot_df_rename = pivot_df_display.copy()
    #pivot_df_rename = pivot_df_rename.rename(columns={"Device": flag})
    pivot_df_rename.rename(columns={"Device": flag}, inplace=True)
    #pivot_df_rename.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", range(1, len(pivot_df_rename) + 1))
    
    st.info(f"‚úÖ ‡∏™‡∏£‡∏∏‡∏õ ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡πÅ‡∏ï‡πà‡∏•‡∏∞ {title} ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(pivot_df_rename, use_container_width=True)

    def to_excel(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Sheet1')
            processed_data = output.getvalue()
            return processed_data
    excel_data = to_excel(pivot_df_rename)
    xlsx_filename = 'command_data' + '_' + flag + ".xlsx"
    st.download_button(
            label=f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£ {flag}",
            data=excel_data,
            file_name=xlsx_filename,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )

    st.info("‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    pivot_df_numeric["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"] = pivot_df_numeric["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].rank(method='min', ascending=False).astype("Int64")
    pivot_df_rename.insert(1, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", pivot_df_numeric["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö"])
    st.dataframe(pivot_df_rename, use_container_width=True)
    st.info("rrr")
    st.dataframe(pivot_df_numeric, use_container_width=True)
    #wide format (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
    #long format (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß)
    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å wide ‡πÄ‡∏õ‡πá‡∏ô long format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    df_long = pivot_df_numeric.reset_index().melt(
        id_vars="Device",
        value_vars=month_names,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="Success Rate (%)"
    )

    # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ NaN (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    df_long = df_long.dropna(subset=["Success Rate (%)"])

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    df_long["Success Rate (%)"] = df_long["Success Rate (%)"].map(lambda x: f"{x:.2f}%" if pd.notnull(x) else "-")

    df_long.rename(columns={"Success Rate (%)": "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"}, inplace=True)

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    #st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á \"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - Device - Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)\"")
    #st.dataframe(df_long, use_container_width=True, hide_index=True)

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏à‡∏≤‡∏Å pivot_df_numeric ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô float)
    df_avg_month = pivot_df_numeric[month_names].mean(axis=0, skipna=True).reset_index()

    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    df_avg_month.columns = ["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    df_avg_month["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df_avg_month["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].map(lambda x: f"{x:.2f}%" if pd.notnull(x) else "-")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.subheader("üìã ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å Device)")
    st.dataframe(df_avg_month, use_container_width=True, hide_index=True)

    # ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_avg = pivot_df_numeric[month_names].mean(skipna=True).reset_index()
    monthly_avg.columns = ["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö %
    monthly_avg["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = monthly_avg["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].map(lambda x: f"{x:.2f}%")

    #st.subheader("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)")
    #st.dataframe(monthly_avg, use_container_width=True, hide_index=True)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    missing_by_month = {}
    for month in month_names:
        if month in pivot_df.columns:
            missing_devices = pivot_df[pd.isna(pivot_df[month])].index.tolist()
            if missing_devices:
                missing_by_month[month] = missing_devices

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if missing_by_month:
        with st.expander("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"):
            for month, devices in missing_by_month.items():
                st.markdown(f"**{month}**: ‡∏û‡∏ö {len(devices)} ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
                st.write(devices)

    # ‡πÅ‡∏õ‡∏•‡∏á dict ‡πÄ‡∏õ‡πá‡∏ô DataFrame
    missing_df = pd.DataFrame([
        {"Month": month, "Device": device}
        for month, devices in missing_by_month.items()
        for device in devices
    ])

    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Device ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(missing_df)
    return pivot_df_display, devices_all_null, pivot_df_numeric

def lineplot(df):
    df_plot = df.melt(id_vars=["Device"], 
                      value_vars=[col for col in df_display.columns if col not in ["Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]],
                      var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
                      value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")

    # plot line chart
    fig_line = px.line(
        df_plot, 
        x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        color="Device", 
        markers=True,
        title="üìà ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device")

    fig_line.update_layout(xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", yaxis_title="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", yaxis=dict(range=[0, 105]))
    st.plotly_chart(fig_line, use_container_width=True)

def barplot(df,flag,countMonth):
    fig_bar = px.bar(
        df.reset_index(), 
        x="Device",
        y="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        text="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        title=f"üìä % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}")

    fig_bar.update_traces(texttemplate="%{text:.2f}", textposition="outside")
    fig_bar.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 120], xaxis_title=flag,yaxis_title="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    st.plotly_chart(fig_bar, use_container_width=True)

def scatterplot(df_num,df_dis,flag,countMonth):
    # ‚úÖ Scatter plot: ‡πÅ‡∏™‡∏î‡∏á Avg ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    #df_num["Avg_Success_Text"] = df_num["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].apply(lambda x: f"{x:.2f}" if pd.notnull(x) else "")

    fig3 = px.scatter(
        df_num.reset_index(),
        x="Device",
        y="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        text="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color_continuous_scale="Viridis",
        title=f"üîµ Scatter : % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
        )
    
    fig3.update_traces(texttemplate="%{text:.2f}", textposition="top center")
    fig3.update_layout(
        xaxis_tickangle=-45,
        xaxis_title=flag,
        yaxis_range=[0, 120],
        yaxis_title="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
        )
    st.plotly_chart(fig3, use_container_width=True)

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô '%' ‡πÄ‡∏õ‡πá‡∏ô float
    df_display_clean = df_dis.copy()
    month_cols = [col for col in df_dis.columns if col not in ["Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]]
    
    for col in month_cols:
        df_display_clean[col] = (
            df_display_clean[col]
            .replace("-", None)
            .str.replace("%", "", regex=False)
        )
        df_display_clean[col] = pd.to_numeric(df_display_clean[col], errors="coerce")
    
    df_scatter = df_display_clean.melt(
        id_vars=["Device"],
        value_vars=month_cols,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )
    df_scatter = df_scatter.dropna(subset=["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"])
    
    fig3_month = px.scatter(
        df_scatter,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        color_discrete_map=color_map,
        size=[10]*len(df_scatter),
        size_max=12,
        text="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        title=f"üîµ Scatter : % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
        )

    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á layout
    fig3_month.update_layout(
        xaxis_tickangle=-45,
        xaxis_title=flag,
        yaxis_range=[0, 120],
        yaxis_title="% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" #‡∏£‡∏ß‡∏° % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Stacked)
        )

    fig3_month.update_traces(
        marker=dict(size=12, symbol="circle", line=dict(width=1, color="DarkSlateGrey")),
        texttemplate="%{text:.2f}",  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤
        textposition="top center", #"top center", #outside    # ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        textfont_size=10,
        )

    st.plotly_chart(fig3_month, use_container_width=True)
    
def histogram(df_num,df_dis,flag,countMonth):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á bin ‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 0-10, 10-20, ..., 90-100
    bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    labels = [f"{i}-{i+10}%" for i in bins[:-1]]
    #bins = list(range(0, 110, 10))  # [0, 10, ..., 100]

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô '%' ‡πÄ‡∏õ‡πá‡∏ô float
    df_display_clean = df_dis.copy()
    st.dataframe(df_display_clean)
    month_cols = [col for col in df_dis.columns if col not in ["Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]]

    for col in month_cols:
        df_display_clean[col] = (
            df_display_clean[col]
            .replace("-", None)
            .str.replace("%", "", regex=False)
        )
        df_display_clean[col] = pd.to_numeric(df_display_clean[col], errors="coerce")

    df_melt = df_display_clean.melt(
        id_vars=["Device"],
        value_vars=month_cols,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )
    
    #df_melt = df_melt.dropna(subset=["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"])
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡πÅ‡∏ö‡∏ö melt
    #df_melt = df_dis.melt(
    #    id_vars=["Device"],
    # value_vars=[col for col in df_dis.columns if col not in ["Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", "Avg_Success_Text"]],
    # var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á df ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ plotly ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å bin ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    dummy_bins = pd.DataFrame({
        "‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": labels,
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [0]*len(labels),
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": ["dummy"]*len(labels)
    })

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á/None ‡πÄ‡∏õ‡πá‡∏ô NaN ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
    df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace("None", np.nan).replace({",": "", "%": ""}, regex=True))
    df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á column ‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£
    df_melt["‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"] = pd.cut(
        df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], 
        bins=bins, 
        labels=labels, 
        include_lowest=True,
        right=False
        )

    # ‡∏•‡∏ö NaN
    df_clean = df_melt.dropna(subset=["‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"])

    # 4. ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á
    df_hist = df_clean.groupby(["‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô")

    # 5. ‡∏£‡∏ß‡∏° dummy ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÉ‡∏ä‡πâ concat)
    df_combined = pd.concat([df_hist, dummy_bins], ignore_index=True)
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô NaN ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ 0
    #df_melt_filtered = df_melt[
    #    (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].notnull()) & 
    #    (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] > 0)
    #]

    # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö color map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á
    months_with_data = df_clean["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].unique()
    filtered_color_map = {m: color_map[m] for m in months_with_data if m in color_map}
    
    # 7. Plot
    fig = px.bar(
        df_combined[df_combined["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] != "dummy"],  # ‡∏ï‡∏±‡∏î dummy ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏£‡∏¥‡∏á
        x="‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        category_orders={"‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£": labels},
        color_discrete_map=filtered_color_map,
        barmode="group",
        title=f"üìä Histogram: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {flag} ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        )

    fig.update_layout(
        xaxis_title="‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        yaxis_title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {flag}",
        bargap=0.0
    )

    fig.update_traces(texttemplate="%{y}", textposition="outside")

    st.plotly_chart(fig, use_container_width=True)
    
    fig4_month = px.histogram(
        df_melt,
        x="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        nbins=10,
        barmode="overlay", #"overlay",  # ‡∏´‡∏£‡∏∑‡∏≠ "group"
        color_discrete_map=filtered_color_map,
        #text_auto=True,     # üëà ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á
        #histfunc="count",   # üëà ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏¥‡∏¢‡∏≤‡∏¢)
        title=f"üìä Histogram : ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {flag} ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        ) 

    fig4_month.update_traces(
        xbins=dict(start=0, end=100, size=10),
        texttemplate="%{y}", textposition="outside"
        )

    fig4_month.update_layout(
        xaxis_title="Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        yaxis_title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {title}",
        xaxis=dict(tickmode="linear", tick0=0, dtick=10),
        xaxis_categoryarray=labels,  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å bin
        #bargap=0.1,  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á
        #barmode='overlay'
        )

    st.plotly_chart(fig4_month, use_container_width=True)

def stacked(df_num,df_dis,flag,countMonth):
    # ‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Bar Chart
    chart_mode = st.selectbox("üõ†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü", ["Grouped", "Stacked"])

    # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    df_display_clean = df_dis.copy()
    month_cols = [col for col in df_dis.columns if col not in ["Device", "Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]]

    for col in month_cols:
        df_display_clean[col] = (
            df_display_clean[col]
            .replace("-", None)
            .str.replace("%", "", regex=False)
        )
        df_display_clean[col] = pd.to_numeric(df_display_clean[col], errors="coerce")

    df_bar = df_display_clean.melt(
        id_vars=["Device"],
        value_vars=month_cols,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    ).dropna(subset=["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"])

    # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å barmode ‡∏ï‡∏≤‡∏° toggle
    barmode = "group" if chart_mode == "Grouped" else "stack"

    # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    title = (
        f"üìä Grouped Bar Chart: % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
        if barmode == "group"
        else f"üìä Stacked Bar Chart: % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
    )

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å df_bar ‡∏´‡∏£‡∏∑‡∏≠ df ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ plot
    unique_months = df_bar["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].unique()

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏à‡∏≤‡∏Å Plotly
    color_palette = px.colors.qualitative.Plotly  # ‡∏°‡∏µ 10 ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á color_map ‡πÇ‡∏î‡∏¢‡∏ß‡∏ô‡∏™‡∏µ‡∏´‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    color_map = {
        month: color_palette[i % len(color_palette)] for i, month in enumerate(sorted(unique_months))
    }

    # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    fig_bar = px.bar(
        df_bar,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        color_discrete_map=color_map,
        barmode=barmode,
        text="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        title=title
    )

    fig_bar.update_layout(
        xaxis_tickangle=-45,
        xaxis_title=flag,
        yaxis_range=[0, 400],
        uniformtext_minsize=8,
        uniformtext_mode='show'  # ‡∏´‡∏£‡∏∑‡∏≠ 'show
    )

    fig_bar.update_traces(
        texttemplate="%{text:.2f}",
        textposition="inside", #if barmode == "stack" else "outside",
        marker=dict(line=dict(width=0.5, color="DarkSlateGrey")),
        insidetextfont=dict(color="white")  # ‡∏´‡∏£‡∏∑‡∏≠ "black" ‡∏ï‡∏≤‡∏°‡∏™‡∏µ bar
    )

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.plotly_chart(fig_bar, use_container_width=True)
def ranking(df):
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Device
    df_summary = df.groupby("Device").agg({
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "sum",
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "sum"
        }).reset_index()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = (df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] / df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]) * 100
    
    # ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
    df_summary["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].rank(ascending=False, method='min') #ascending=False (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢) method='min' ‡∏ñ‡πâ‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå 2 ‡∏ï‡∏±‡∏ß‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‚Üí ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô
    df_summary["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö % ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].rank(ascending=False, method='min')
    
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].astype(int)
    df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].astype(int)
    df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].round(2)

    st.markdown("## üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£")

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    st.markdown("### üî¢ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    df_sorted_total = df_summary.sort_values(by="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ascending=False)
    st.dataframe(df_sorted_total, use_container_width=True)

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° % ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    st.markdown("### ‚úÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° % ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    df_sorted_success = df_summary.sort_values(by="% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ascending=False)
    st.dataframe(df_sorted_success, use_container_width=True)

    # Top 10 by total
    top10_total = df_sorted_total.head(10)
    fig_top_total = px.bar(top10_total, x="Device", y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", text="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                        title="üèÖ Top 10 ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    st.plotly_chart(fig_top_total, use_container_width=True)

    # Top 10 by % success
    top10_success = df_sorted_success.head(10)
    fig_top_success = px.bar(top10_success, x="Device", y="% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", text="% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                            title="üèÖ Top 10 ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (%)")
    st.plotly_chart(fig_top_success, use_container_width=True)

def ranking_by_month(df):
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    df_summary = df.groupby(["Availability Period", "Device"]).agg({
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "sum",
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "sum"
    }).reset_index()

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = (df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] / df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]) * 100

    # ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_summary["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df_summary.groupby("Availability Period")["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].rank(ascending=False, method="min")
    df_summary["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö % ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary.groupby("Availability Period")["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].rank(ascending=False, method="min")

    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].astype(int)
    df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].astype(int)
    df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = df_summary["% ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].round(2)

    st.markdown("## üìÖ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ß‡∏°
    st.dataframe(df_summary, use_container_width=True)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    selected_month = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Top 10", df_summary["Availability Period"].unique())
    top10 = df_summary[df_summary["Availability Period"] == selected_month].sort_values(by="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ascending=False).head(10)

    fig = px.bar(
        top10,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        text="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        title=f"üèÖ Top 10 ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selected_month}"
    )
    st.plotly_chart(fig, use_container_width=True)

    buffer = io.BytesIO()
    df_summary.to_excel(buffer, index=False)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", buffer.getvalue(), file_name="ranking_by_month.xlsx")

    # ==== ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢ ====

    st.markdown("## ‚ùå ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

    # ‡πÅ‡∏õ‡∏•‡∏á None ‡πÉ‡∏ô '‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡πÄ‡∏õ‡πá‡∏ô 0
    df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].fillna(0).astype(int)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if "Availability Period" not in df.columns:
        df["Availability Period"] = pd.to_datetime(df["Field change time"]).dt.to_period("M").astype(str)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£
    df_no_cmd = df[df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] == 0]
    df_result = df_no_cmd[["Availability Period", "Device"]].drop_duplicates().sort_values(
        by=["Availability Period", "Device"]
    ).reset_index(drop=True)

    st.dataframe(df_result, use_container_width=True)

    buffer = io.BytesIO()
    df_result.to_excel(buffer, index=False, engine="openpyxl")
    buffer.seek(0)
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£",
        data=buffer,
        file_name="devices_no_command.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

def devices_with_no_commands(df_all):
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ None/NaN ‡πÄ‡∏õ‡πá‡∏ô 0
    df_all["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df_all["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].fillna(0).astype(int)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Availability Period" ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if "Availability Period" not in df_all.columns:
        df_all["Availability Period"] = pd.to_datetime(df_all["Field change time"]).dt.to_period("M").astype(str)

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
    df_no_cmd = df_all[df_all["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] == 0]

    # ‡∏ï‡∏±‡∏î‡∏ã‡πâ‡∏≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Device ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_result = df_no_cmd[["Availability Period", "Device"]].drop_duplicates().sort_values(
        by=["Availability Period", "Device"]
    ).reset_index(drop=True)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.markdown("## ‚ùå ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(df_result, use_container_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    buffer = io.BytesIO()
    df_result.to_excel(buffer, index=False, engine="openpyxl")
    buffer.seek(0)
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£",
        data=buffer,
        file_name="devices_no_command.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    return df_result

def device_command_summary_table(df, flag):
    st.markdown("## üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

    # ‡πÄ‡∏ï‡∏¥‡∏° missing ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].fillna(0).astype(int)

    # ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ
    if "Availability Period" not in df.columns:
        df["Availability Period"] = pd.to_datetime(df["Field change time"]).dt.to_period("M").astype(str)
    
    df["‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].apply(lambda x: 1 if x > 0 else 0)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‚Üí ‡∏°.‡∏Ñ. 2025
    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"] = pd.to_datetime(df["Availability Period"], format="%Y-%m")
    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"].dt.strftime("%b %Y")  # ‡πÄ‡∏ä‡πà‡∏ô Jan 2025
    month_map = {
        "Jan": "‡∏°.‡∏Ñ.", "Feb": "‡∏Å.‡∏û.", "Mar": "‡∏°‡∏µ.‡∏Ñ.", "Apr": "‡πÄ‡∏°.‡∏¢.",
        "May": "‡∏û.‡∏Ñ.", "Jun": "‡∏°‡∏¥.‡∏¢.", "Jul": "‡∏Å.‡∏Ñ.", "Aug": "‡∏™.‡∏Ñ.",
        "Sep": "‡∏Å.‡∏¢.", "Oct": "‡∏ï.‡∏Ñ.", "Nov": "‡∏û.‡∏¢.", "Dec": "‡∏ò.‡∏Ñ."
    }
    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"] = df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•"].apply(lambda x: f"{month_map.get(x[:3], x[:3])} {x[4:]}")

    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Device ‡∏ï‡∏≤‡∏° flag
    if flag == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤":
        df["Device"] = df["Device"].apply(lambda x: x.split("_")[0])  # ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    # Pivot Table
    pivot = df.pivot_table(index="Device", columns="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", values="‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", aggfunc="max", fill_value=0)
    pivot = pivot.applymap(lambda x: "‚úÖ" if x == 1 else "‚ùå")

    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Device ‡∏ï‡∏≤‡∏° flag
    new_device_column_name = "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU" if flag == "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU" else "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"
    pivot.index.name = new_device_column_name

    # ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢
    never_commanded = pivot[(pivot == "‚ùå").all(axis=1)].copy()
    never_commanded.index.name = new_device_column_name

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    st.markdown("### üìå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‚úÖ = ‡∏°‡∏µ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£, ‚ùå = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£)")
    st.dataframe(pivot, use_container_width=True)

    st.markdown("### üö´ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(never_commanded, use_container_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        pivot.to_excel(writer, sheet_name="Summary")
        never_commanded.to_excel(writer, sheet_name="Never Commanded")
    buffer.seek(0)

    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
        data=buffer,
        file_name="device_no_command_summary.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    return df

def compare(df):
    
    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢ 0 ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    df[["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]] = df[["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]].fillna(0).astype(int)
    df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].fillna(0).round(2)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Device ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å
    device_select = st.selectbox("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° % ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£", df["Device"].unique())

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô
    device_df = df[df["Device"] == device_select]

    fig_line = px.line(
        df,
        x="Device",
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        title=f"üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° % ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå {device_select}",
        markers=True
    )
    fig_line.update_traces(texttemplate="%{y:.1f}%", textposition="top center")
    st.plotly_chart(fig_line, use_container_width=True)

# ---- Upload and Merge ----
uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    
    for uploaded_file in uploaded_files:
        xls = pd.ExcelFile(uploaded_file)
        sheetnames = xls.sheet_names
        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï
        selected_sheet = st.selectbox(f"üìë ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}", sheetnames, key=uploaded_file.name)

        df = pd.read_excel(uploaded_file,sheet_name=selected_sheet)

        if "Availability Period" not in df.columns:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
            continue
        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace({",": "", "%": ""}, regex=True)

        #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].astype(str).str.replace(",", "").str.replace("%", "").str.strip()
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
        
        all_data.append(df)

        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] * 100

     # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
    df_merged = pd.concat(all_data, ignore_index=True)
    #df_combined = pd.concat(all_data, ignore_index=True)
    st.success(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {len(uploaded_files)} ‡πÑ‡∏ü‡∏•‡πå ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

    # ---- Select Flag (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: Zone/Province/Feeder) ----
    flag = st.selectbox("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", ["‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"])

    #if flag not in df_merged.columns:
    #    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{flag}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ")
    #    st.stop()

    # ---- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Pivot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ----
    title = flag  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü
    df_display, devices_all_null, df_numeric = pivot(df_merged, flag)
    #st.info("aaa")
    #st.dataframe(df_numeric)
    #ranking(df_merged)
    #ranking_by_month(df_merged)
    #missing_devices_df = devices_with_no_commands(df_merged)
    #df_summary = device_command_summary_table(df_merged, flag)
    #compare(df_summary)

    # ---- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----
    #countMonth = df_merged.drop(columns=["Avg.‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]).count(axis=1).max()
    countMonth = len(df_merged["Availability Period"].unique())

    # ---- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Visualization ----
    with st.expander("üìà Line Chart", expanded=True):
        #lineplot(df_display)
        st.info('test')
    with st.expander("üìä Bar Chart", expanded=True):
        barplot(df_numeric, flag, countMonth)
        st.info('test')
    with st.expander("üîµ Scatter Plot", expanded=True):
        scatterplot(df_numeric, df_display, flag, countMonth)
        st.info('test')
    with st.expander("üìä Histogram", expanded=True):
        histogram(df_numeric, df_display, flag, countMonth)
        st.info('test')
    with st.expander("üìä Stacked", expanded=True):
        stacked(df_numeric, df_display, flag, countMonth)
        st.info('test')

    

    # ‡πÅ‡∏õ‡∏•‡∏á Timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•‡∏á)
#df["Timestamp"] = pd.to_datetime(df["Timestamp"])

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'YYYY-MM'
#df["Month"] = df["Timestamp"].dt.to_period("M").astype(str)

# ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠ Device ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    command_counts = df_merged.groupby(["Month", "Device"]).size().reset_index(name="Command Count")

    """   
    format_dict = {
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "{:,.0f}",       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "{:,.0f}",        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)": "{:.2f}"     # ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    }

    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)

    if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
        title = '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU'
    else:
        title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'
    

    lineplot(df_display)
    barplot(df_numeric,title,countMonth)
    scatterplot(df_numeric,df_display,title,countMonth)
    histogram(df_numeric,df_display,title,countMonth)
    """