import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
from io import StringIO
import numpy as np

color_map = {
        "‡∏°.‡∏Ñ.": "#1f77b4",
        "‡∏Å.‡∏û.": "#ff7f0e",
        "‡∏°‡∏µ.‡∏Ñ.": "#2ca02c",
        "‡πÄ‡∏°.‡∏¢.": "#d62728",
        "‡∏û.‡∏Ñ.": "#9467bd",
        "‡∏°‡∏¥.‡∏¢.": "#8c564b",
        "‡∏Å.‡∏Ñ.": "#e377c2",
        "‡∏™.‡∏Ñ.": "#7f7f7f",
        "‡∏Å.‡∏¢.": "#bcbd22",
        "‡∏ï.‡∏Ñ.": "#17becf",
        "‡∏û.‡∏¢.": "#aec7e8",
        "‡∏ò.‡∏Ñ.": "#ffbb78"
        }

def pivot(df,flag):
    df_pivot = df.copy()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    df_pivot["Month"] = pd.to_datetime(df_pivot["Availability Period"], format="%Y-%m", errors="coerce")
    df_pivot["Month_num"] = df_pivot["Month"].dt.month

    month_names = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
                   '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
    df_pivot["Month_name"] = df_pivot["Month_num"].apply(lambda x: month_names[int(x) - 1] if pd.notnull(x) else "")

    pivot_df = df_pivot.pivot_table(
        index="Device",
        columns="Month_name",
        values="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        aggfunc="mean"
    )

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    pivot_df = pivot_df.reindex(columns=month_names)

    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
    pivot_df["Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pivot_df.mean(axis=1, skipna=True)

    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
    null_mask = pivot_df.drop(columns="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)").isnull().all(axis=1)
    devices_all_null = pivot_df[null_mask].index.tolist()

    if devices_all_null:
        st.warning(f"üîç ‡∏û‡∏ö {len(devices_all_null)} ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ:")
        st.write(devices_all_null)
    
    pivot_df_numeric = pivot_df.copy()  # ‡∏Å‡πà‡∏≠‡∏ô format
    st.write(pivot_df_numeric.columns)
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (xx.xx%) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN
    def format_percent(val):
        return f"{val:.2f}%" if pd.notnull(val) else "-"
    
    for col in month_names + ["Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]:
        if col in pivot_df.columns:
            pivot_df[col] = pivot_df[col].apply(format_percent)
    
    pivot_df_display = pivot_df.reset_index()
    pivot_df_rename = pivot_df_display.copy()
    pivot_df_rename = pivot_df_rename.rename(columns={
        "Device": flag})
    
    st.info(f"‚úÖ ‡∏™‡∏£‡∏∏‡∏õ ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡πÅ‡∏ï‡πà‡∏•‡∏∞ {title} ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.dataframe(pivot_df_rename, use_container_width=True)

    def to_excel(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Sheet1')
            processed_data = output.getvalue()
            return processed_data
    excel_data = to_excel(pivot_df_rename)
    xlsx_filename = 'command_data' + '_' + flag + ".xlsx"
    st.download_button(
            label=f"üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£ {flag}",
            data=excel_data,
            file_name=xlsx_filename,
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
    
    return pivot_df_display, devices_all_null, pivot_df_numeric

def lineplot(df):
    df_plot = df.melt(id_vars=["Device"], 
                      value_vars=[col for col in df_display.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]],
                      var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
                      value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    st.dataframe(df_plot)

    # plot line chart
    fig_line = px.line(
        df_plot, 
        x="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", 
        y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        color="Device", 
        markers=True,
        title="üìà ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%) ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Device")

    fig_line.update_layout(xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", yaxis_title="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", yaxis=dict(range=[0, 105]))
    st.plotly_chart(fig_line, use_container_width=True)

def barplot(df,flag,countMonth):
    fig_bar = px.bar(
        df.reset_index(), 
        x="Device",
        y="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        text="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", 
        title=f"üìä % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}")

    fig_bar.update_traces(texttemplate="%{text:.2f}", textposition="outside")
    fig_bar.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 120], xaxis_title=flag,yaxis_title="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    st.plotly_chart(fig_bar, use_container_width=True)

def scatterplot(df_num,df_dis,flag,countMonth):
    # ‚úÖ Scatter plot: ‡πÅ‡∏™‡∏î‡∏á Avg ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Device
    #df_num["Avg_Success_Text"] = df_num["Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].apply(lambda x: f"{x:.2f}" if pd.notnull(x) else "")

    fig3 = px.scatter(
        df_num.reset_index(),
        x="Device",
        y="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        text="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color_continuous_scale="Viridis",
        title=f"üîµ Scatter : % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
    )
    
    fig3.update_traces(texttemplate="%{text:.2f}", textposition="top center")
    fig3.update_layout(
        xaxis_tickangle=-45,
        xaxis_title=flag,
        yaxis_range=[0, 120],
        yaxis_title="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )
    st.plotly_chart(fig3, use_container_width=True)

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô '%' ‡πÄ‡∏õ‡πá‡∏ô float
    df_display_clean = df_dis.copy()
    month_cols = [col for col in df_dis.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]]
    
    for col in month_cols:
        df_display_clean[col] = (
            df_display_clean[col]
            .replace("-", None)
            .str.replace("%", "", regex=False)
        )
        df_display_clean[col] = pd.to_numeric(df_display_clean[col], errors="coerce")
    
    df_scatter = df_display_clean.melt(
        id_vars=["Device"],
        value_vars=month_cols,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )
    df_scatter = df_scatter.dropna(subset=["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"])
    
    fig3_month = px.scatter(
    df_scatter,
    x="Device",
    y="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
    color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    color_discrete_map=color_map,
    size=[10]*len(df_scatter),
    size_max=12,
    text="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    title=f"üîµ Scatter : % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ {flag}"
)
    fig3_month.update_layout(xaxis_tickangle=-45, yaxis_range=[0, 105], xaxis_title=flag)
    fig3_month.update_traces(
    marker=dict(size=12, symbol="circle", line=dict(width=1, color="DarkSlateGrey")),
    texttemplate="%{text:.2f}",  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤
    textposition="top center",     # ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    textfont_size=10,
    )

    st.plotly_chart(fig3_month, use_container_width=True)

def histogram(df_num,df_dis,flag,countMonth):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á bin ‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô 0-10, 10-20, ..., 90-100
    bins = list(range(0, 110, 10))  # [0, 10, 20, ..., 100]
    labels = [f"{i}-{i+10}%" for i in bins[:-1]]  # ['0-10%', '10-20%', ..., '90-100%']
    st.write(labels)
    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô '%' ‡πÄ‡∏õ‡πá‡∏ô float
    df_display_clean = df_dis.copy()
    month_cols = [col for col in df_dis.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"]]

    for col in month_cols:
        df_display_clean[col] = (
            df_display_clean[col]
            .replace("-", None)
            .str.replace("%", "", regex=False)
        )
        df_display_clean[col] = pd.to_numeric(df_display_clean[col], errors="coerce")

    df_melt = df_display_clean.melt(
        id_vars=["Device"],
        value_vars=month_cols,
        var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    )

    #df_melt = df_melt.dropna(subset=["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"])


    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡πÅ‡∏ö‡∏ö melt
    #df_melt = df_dis.melt(
    #    id_vars=["Device"],
    # value_vars=[col for col in df_dis.columns if col not in ["Device", "Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)", "Avg_Success_Text"]],
    # var_name="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",value_name="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)")
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á/None ‡πÄ‡∏õ‡πá‡∏ô NaN ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float
    df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace("None", np.nan).replace({",": "", "%": ""}, regex=True))
    df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå bin ‡πÉ‡∏´‡∏°‡πà
    df_melt["‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"] = pd.cut(df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], bins=bins, labels=labels, include_lowest=True, right=False)

    st.write(df_melt["‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"])
    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô NaN ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤ 0
    #df_melt_filtered = df_melt[
    #    (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].notnull()) & 
    #    (df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] > 0)
    #]
    # 1. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"
    df_scatter_clean = df_melt[pd.to_numeric(df_melt["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce").notna()]

    # 2. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
    used_months = df_scatter_clean["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].unique()

    # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á color_map ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    filtered_color_map = {month: color_map[month] for month in used_months if month in color_map}

    fig4_month = px.histogram(
        df_melt,
        x="‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        color="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        nbins=10,
        barmode="overlay", #"overlay",  # ‡∏´‡∏£‡∏∑‡∏≠ "group"
        color_discrete_map=filtered_color_map,
        #text_auto=True,     # üëà ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á
        #histfunc="count",   # üëà ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏¥‡∏¢‡∏≤‡∏¢)
        title=f"üìä Histogram : ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {flag} ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á % ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {countMonth} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
    ) 

    fig4_month.update_traces(
        xbins=dict(start=10, end=100, size=10),
        texttemplate="%{y}", textposition="outside"
        )

    fig4_month.update_layout(
        xaxis_title="Avg ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)",
        yaxis_title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {title}",
        xaxis=dict(tickmode="linear", tick0=0, dtick=10),
        xaxis_categoryarray=labels,  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å bin
        #bargap=0.1,  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á
        #barmode='overlay'
        )
    
    st.plotly_chart(fig4_month, use_container_width=True)

# ---- Upload and Merge ----
uploaded_files = st.file_uploader("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)", type=["xlsx", "xls"], accept_multiple_files=True)

if uploaded_files:
    all_data = []
    
    for uploaded_file in uploaded_files:
        df = pd.read_excel(uploaded_file)

        if "Availability Period" not in df.columns:
            st.warning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Availability Period' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {uploaded_file.name}")
        
        df["Month"] = pd.to_datetime(df["Availability Period"], format="%Y-%m", errors="coerce")
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].replace({",": "", "%": ""}, regex=True)

        #df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"].astype(str).str.replace(",", "").str.replace("%", "").str.strip()
        df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"] = pd.to_numeric(df["‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)"], errors="coerce")
        
        all_data.append(df)

    df_combined = pd.concat(all_data, ignore_index=True)
    countMonth = len(df_combined["Availability Period"].unique())
    format_dict = {
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": "{:,.0f}",       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à": "{:,.0f}",        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡∏°‡∏µ comma
        "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%)": "{:.2f}"     # ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    }

    option_func = ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•', 'Histogram', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']
    option_submenu = ['‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á','‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤']
    submenu_select = st.sidebar.radio(label="‡∏£‡∏∞‡∏ö‡∏ö: ", options = option_submenu)

    if submenu_select == '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏™‡πà‡∏á':
        title = '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå FRTU'
    else:
        title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'

    df_display, devices_all_null, df_numeric = pivot(df_combined,title)
    #lineplot(df_display)
    barplot(df_numeric,title,countMonth)
    scatterplot(df_numeric,df_display,title,countMonth)
    histogram(df_numeric,df_display,title,countMonth)